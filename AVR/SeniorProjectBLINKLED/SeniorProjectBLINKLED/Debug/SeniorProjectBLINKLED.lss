
SeniorProjectBLINKLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00000f1c  00000fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800130  00800130  00001080  2**0
                  ALLOC
  3 .stab         00002460  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000093e  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003e1e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000238  00000000  00000000  00003e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002135  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f27  00000000  00000000  000061ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001533  00000000  00000000  000070e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  00008614  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000062c  00000000  00000000  00008d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000135d  00000000  00000000  00009330  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  0000a68d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		}
	}
}

void pwm_toggle()
{
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	34 c1       	rjmp	.+616    	; 0x26c <__vector_1>
   4:	05 c2       	rjmp	.+1034   	; 0x410 <__vector_2>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	eb c0       	rjmp	.+470    	; 0x1e0 <__vector_4>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
	while(1)
	{
		printf("Start OCR1B\r\n");
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
  2e:	11 e0       	ldi	r17, 0x01	; 1
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec e1       	ldi	r30, 0x1C	; 28
  36:	ff e0       	ldi	r31, 0x0F	; 15
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 33       	cpi	r26, 0x30	; 48
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	21 e0       	ldi	r18, 0x01	; 1
  46:	a0 e3       	ldi	r26, 0x30	; 48
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
	if (__tmp < 1.0)
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 36       	cpi	r26, 0x60	; 96
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	ad d2       	rcall	.+1370   	; 0x5b0 <main>
  56:	60 c7       	rjmp	.+3776   	; 0xf18 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <init_hbridge>:
  5a:	0f 93       	push	r16
  5c:	1f 93       	push	r17
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
		__ticks = 1;
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	73 d2       	rcall	.+1254   	; 0x54e <init_OCR_pins>
  68:	00 91 36 01 	lds	r16, 0x0136
	else if (__tmp > 65535)
  6c:	10 91 37 01 	lds	r17, 0x0137
  70:	20 91 38 01 	lds	r18, 0x0138
  74:	30 91 39 01 	lds	r19, 0x0139
  78:	40 91 3a 01 	lds	r20, 0x013A
  7c:	50 91 3b 01 	lds	r21, 0x013B
  80:	60 91 3c 01 	lds	r22, 0x013C
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  84:	70 91 3d 01 	lds	r23, 0x013D
  88:	80 91 3e 01 	lds	r24, 0x013E
  8c:	2a d2       	rcall	.+1108   	; 0x4e2 <pin_low>
  8e:	00 91 48 01 	lds	r16, 0x0148
  92:	10 91 49 01 	lds	r17, 0x0149
  96:	20 91 4a 01 	lds	r18, 0x014A
  9a:	30 91 4b 01 	lds	r19, 0x014B
  9e:	40 91 4c 01 	lds	r20, 0x014C
  a2:	50 91 4d 01 	lds	r21, 0x014D
  a6:	60 91 4e 01 	lds	r22, 0x014E
  aa:	70 91 4f 01 	lds	r23, 0x014F
  ae:	80 91 50 01 	lds	r24, 0x0150
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	17 d2       	rcall	.+1070   	; 0x4e2 <pin_low>
  b4:	00 91 36 01 	lds	r16, 0x0136
  b8:	10 91 37 01 	lds	r17, 0x0137
  bc:	20 91 38 01 	lds	r18, 0x0138
  c0:	30 91 39 01 	lds	r19, 0x0139
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	40 91 3a 01 	lds	r20, 0x013A
  c8:	50 91 3b 01 	lds	r21, 0x013B
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	60 91 3c 01 	lds	r22, 0x013C
  d0:	70 91 3d 01 	lds	r23, 0x013D
  d4:	80 91 3e 01 	lds	r24, 0x013E
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  d8:	cf d1       	rcall	.+926    	; 0x478 <pin_output>
  da:	00 91 48 01 	lds	r16, 0x0148
  de:	10 91 49 01 	lds	r17, 0x0149
  e2:	20 91 4a 01 	lds	r18, 0x014A
  e6:	30 91 4b 01 	lds	r19, 0x014B
  ea:	40 91 4c 01 	lds	r20, 0x014C
  ee:	50 91 4d 01 	lds	r21, 0x014D
  f2:	60 91 4e 01 	lds	r22, 0x014E
  f6:	70 91 4f 01 	lds	r23, 0x014F
  fa:	80 91 50 01 	lds	r24, 0x0150
  fe:	bc d1       	rcall	.+888    	; 0x478 <pin_output>
 100:	df 91       	pop	r29
		//start_pin_pwm(',30);
		_delay_ms(60000);
		
		printf("Start OCR1A\r\n");
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	08 95       	ret

0000010a <USART_Init>:
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <USART_Init+0x6>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	9a 83       	std	Y+2, r25	; 0x02
 116:	89 83       	std	Y+1, r24	; 0x01
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 118:	f8 94       	cli
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	29 81       	ldd	r18, Y+1	; 0x01
 120:	3a 81       	ldd	r19, Y+2	; 0x02
 122:	23 2f       	mov	r18, r19
 124:	33 27       	eor	r19, r19
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	89 e2       	ldi	r24, 0x29	; 41
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
 134:	8a e2       	ldi	r24, 0x2A	; 42
	if (__tmp < 1.0)
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	28 e1       	ldi	r18, 0x18	; 24
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2e e8       	ldi	r18, 0x8E	; 142
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
 148:	80 e6       	ldi	r24, 0x60	; 96
 14a:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
 14c:	90 93 5b 01 	sts	0x015B, r25
 150:	80 93 5a 01 	sts	0x015A, r24
 154:	80 e6       	ldi	r24, 0x60	; 96
	else if (__tmp > 65535)
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 5d 01 	sts	0x015D, r25
 15c:	80 93 5c 01 	sts	0x015C, r24
 160:	78 94       	sei
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <USART_Transmit>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <USART_Transmit+0x6>
 172:	1f 92       	push	r1
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	89 83       	std	Y+1, r24	; 0x01
 17a:	7b 83       	std	Y+3, r23	; 0x03
 17c:	6a 83       	std	Y+2, r22	; 0x02
 17e:	00 00       	nop
 180:	8b e2       	ldi	r24, 0x2B	; 43
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	80 81       	ld	r24, Z
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	80 72       	andi	r24, 0x20	; 32
 18e:	99 27       	eor	r25, r25
 190:	00 97       	sbiw	r24, 0x00	; 0
 192:	b1 f3       	breq	.-20     	; 0x180 <USART_Transmit+0x14>
 194:	8c e2       	ldi	r24, 0x2C	; 44
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	29 81       	ldd	r18, Y+1	; 0x01
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	08 95       	ret

000001ae <USART_Receive>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <USART_Receive+0x6>
 1b4:	cd b7       	in	r28, 0x3d	; 61
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	00 00       	nop
 1be:	8b e2       	ldi	r24, 0x2B	; 43
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	88 23       	and	r24, r24
 1c8:	d4 f7       	brge	.-12     	; 0x1be <USART_Receive+0x10>
 1ca:	8c e2       	ldi	r24, 0x2C	; 44
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <__vector_4>:
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	00 90 5f 00 	lds	r0, 0x005F
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
		//start_pin_pwm('a',30);
		_delay_ms(60000);
	}
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19



//Timer Interupt
int seconds = 0;
ISR(TIMER1_COMPA_vect){
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	//OCR1A = (dutyCycle/100.0)*255.0;
	seconds++;
 20c:	80 91 32 01 	lds	r24, 0x0132
 210:	90 91 33 01 	lds	r25, 0x0133
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 33 01 	sts	0x0133, r25
 21a:	80 93 32 01 	sts	0x0132, r24
	printf("in timer overflow: %d seconds have passed\r\n", seconds);
 21e:	80 91 32 01 	lds	r24, 0x0132
 222:	90 91 33 01 	lds	r25, 0x0133
 226:	29 2f       	mov	r18, r25
 228:	2f 93       	push	r18
 22a:	8f 93       	push	r24
 22c:	8e e6       	ldi	r24, 0x6E	; 110
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	89 2f       	mov	r24, r25
 232:	8f 93       	push	r24
 234:	8e e6       	ldi	r24, 0x6E	; 110
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	8f 93       	push	r24
 23a:	8a d3       	rcall	.+1812   	; 0x950 <printf>
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
	//_delay_ms(100);
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	00 92 5f 00 	sts	0x005F, r0
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_1>:

//Hardware Interupt
//Async task
int i = 0;
ISR(INT0_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	00 90 5f 00 	lds	r0, 0x005F
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	2e 97       	sbiw	r28, 0x0e	; 14
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	a8 e4       	ldi	r26, 0x48	; 72
 2a8:	b2 e4       	ldi	r27, 0x42	; 66
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	9a 83       	std	Y+2, r25	; 0x02
 2ae:	ab 83       	std	Y+3, r26	; 0x03
 2b0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	4a e7       	ldi	r20, 0x7A	; 122
 2b8:	53 e4       	ldi	r21, 0x43	; 67
 2ba:	69 81       	ldd	r22, Y+1	; 0x01
 2bc:	7a 81       	ldd	r23, Y+2	; 0x02
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	9c 81       	ldd	r25, Y+4	; 0x04
 2c2:	e3 d2       	rcall	.+1478   	; 0x88a <__mulsf3>
 2c4:	dc 01       	movw	r26, r24
 2c6:	cb 01       	movw	r24, r22
 2c8:	8d 83       	std	Y+5, r24	; 0x05
 2ca:	9e 83       	std	Y+6, r25	; 0x06
 2cc:	af 83       	std	Y+7, r26	; 0x07
 2ce:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e8       	ldi	r20, 0x80	; 128
 2d6:	5f e3       	ldi	r21, 0x3F	; 63
 2d8:	6d 81       	ldd	r22, Y+5	; 0x05
 2da:	7e 81       	ldd	r23, Y+6	; 0x06
 2dc:	8f 81       	ldd	r24, Y+7	; 0x07
 2de:	98 85       	ldd	r25, Y+8	; 0x08
 2e0:	2b d2       	rcall	.+1110   	; 0x738 <__cmpsf2>
 2e2:	88 23       	and	r24, r24
 2e4:	2c f4       	brge	.+10     	; 0x2f0 <__vector_1+0x84>
		__ticks = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	9a 87       	std	Y+10, r25	; 0x0a
 2ec:	89 87       	std	Y+9, r24	; 0x09
 2ee:	3e c0       	rjmp	.+124    	; 0x36c <__vector_1+0x100>
	else if (__tmp > 65535)
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	3f ef       	ldi	r19, 0xFF	; 255
 2f4:	4f e7       	ldi	r20, 0x7F	; 127
 2f6:	57 e4       	ldi	r21, 0x47	; 71
 2f8:	6d 81       	ldd	r22, Y+5	; 0x05
 2fa:	7e 81       	ldd	r23, Y+6	; 0x06
 2fc:	8f 81       	ldd	r24, Y+7	; 0x07
 2fe:	98 85       	ldd	r25, Y+8	; 0x08
 300:	c0 d2       	rcall	.+1408   	; 0x882 <__gesf2>
 302:	18 16       	cp	r1, r24
 304:	54 f5       	brge	.+84     	; 0x35a <__vector_1+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e2       	ldi	r20, 0x20	; 32
 30c:	51 e4       	ldi	r21, 0x41	; 65
 30e:	69 81       	ldd	r22, Y+1	; 0x01
 310:	7a 81       	ldd	r23, Y+2	; 0x02
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	9c 81       	ldd	r25, Y+4	; 0x04
 316:	b9 d2       	rcall	.+1394   	; 0x88a <__mulsf3>
 318:	dc 01       	movw	r26, r24
 31a:	cb 01       	movw	r24, r22
 31c:	bc 01       	movw	r22, r24
 31e:	cd 01       	movw	r24, r26
 320:	0f d2       	rcall	.+1054   	; 0x740 <__fixunssfsi>
 322:	dc 01       	movw	r26, r24
 324:	cb 01       	movw	r24, r22
 326:	9a 87       	std	Y+10, r25	; 0x0a
 328:	89 87       	std	Y+9, r24	; 0x09
 32a:	12 c0       	rjmp	.+36     	; 0x350 <__vector_1+0xe4>
 32c:	89 e1       	ldi	r24, 0x19	; 25
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	9c 87       	std	Y+12, r25	; 0x0c
 332:	8b 87       	std	Y+11, r24	; 0x0b
 334:	8b 85       	ldd	r24, Y+11	; 0x0b
 336:	9c 85       	ldd	r25, Y+12	; 0x0c
 338:	8c 01       	movw	r16, r24
 33a:	c8 01       	movw	r24, r16
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <__vector_1+0xd0>
 340:	8c 01       	movw	r16, r24
 342:	1c 87       	std	Y+12, r17	; 0x0c
 344:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 346:	89 85       	ldd	r24, Y+9	; 0x09
 348:	9a 85       	ldd	r25, Y+10	; 0x0a
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	9a 87       	std	Y+10, r25	; 0x0a
 34e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 350:	89 85       	ldd	r24, Y+9	; 0x09
 352:	9a 85       	ldd	r25, Y+10	; 0x0a
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	51 f7       	brne	.-44     	; 0x32c <__vector_1+0xc0>
 358:	16 c0       	rjmp	.+44     	; 0x386 <__vector_1+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 35a:	6d 81       	ldd	r22, Y+5	; 0x05
 35c:	7e 81       	ldd	r23, Y+6	; 0x06
 35e:	8f 81       	ldd	r24, Y+7	; 0x07
 360:	98 85       	ldd	r25, Y+8	; 0x08
 362:	ee d1       	rcall	.+988    	; 0x740 <__fixunssfsi>
 364:	dc 01       	movw	r26, r24
 366:	cb 01       	movw	r24, r22
 368:	9a 87       	std	Y+10, r25	; 0x0a
 36a:	89 87       	std	Y+9, r24	; 0x09
 36c:	89 85       	ldd	r24, Y+9	; 0x09
 36e:	9a 85       	ldd	r25, Y+10	; 0x0a
 370:	9e 87       	std	Y+14, r25	; 0x0e
 372:	8d 87       	std	Y+13, r24	; 0x0d
 374:	8d 85       	ldd	r24, Y+13	; 0x0d
 376:	9e 85       	ldd	r25, Y+14	; 0x0e
 378:	8c 01       	movw	r16, r24
 37a:	c8 01       	movw	r24, r16
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <__vector_1+0x110>
 380:	8c 01       	movw	r16, r24
 382:	1e 87       	std	Y+14, r17	; 0x0e
 384:	0d 87       	std	Y+13, r16	; 0x0d
	//PD2 and PD3 are external interupts.
	_delay_ms(DEBOUNCE_TIME);
	in_progress = FALSE;
 386:	10 92 31 01 	sts	0x0131, r1
 38a:	10 92 30 01 	sts	0x0130, r1
	i++;
 38e:	80 91 34 01 	lds	r24, 0x0134
 392:	90 91 35 01 	lds	r25, 0x0135
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	90 93 35 01 	sts	0x0135, r25
 39c:	80 93 34 01 	sts	0x0134, r24
	printf("In locked HW interrupt %d, In_progress = %d\r\n", i, in_progress);
 3a0:	20 91 30 01 	lds	r18, 0x0130
 3a4:	30 91 31 01 	lds	r19, 0x0131
 3a8:	80 91 34 01 	lds	r24, 0x0134
 3ac:	90 91 35 01 	lds	r25, 0x0135
 3b0:	43 2f       	mov	r20, r19
 3b2:	4f 93       	push	r20
 3b4:	2f 93       	push	r18
 3b6:	29 2f       	mov	r18, r25
 3b8:	2f 93       	push	r18
 3ba:	8f 93       	push	r24
 3bc:	8a e9       	ldi	r24, 0x9A	; 154
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	89 2f       	mov	r24, r25
 3c2:	8f 93       	push	r24
 3c4:	8a e9       	ldi	r24, 0x9A	; 154
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	8f 93       	push	r24
 3ca:	c2 d2       	rcall	.+1412   	; 0x950 <printf>
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
}
 3d8:	2e 96       	adiw	r28, 0x0e	; 14
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	0f 90       	pop	r0
 406:	00 92 5f 00 	sts	0x005F, r0
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_2>:
ISR(INT1_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	00 90 5f 00 	lds	r0, 0x005F
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	2f 93       	push	r18
 41e:	3f 93       	push	r19
 420:	4f 93       	push	r20
 422:	5f 93       	push	r21
 424:	6f 93       	push	r22
 426:	7f 93       	push	r23
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
	printf("in unlock HW interrupt");
 43c:	88 ec       	ldi	r24, 0xC8	; 200
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	89 2f       	mov	r24, r25
 442:	8f 93       	push	r24
 444:	88 ec       	ldi	r24, 0xC8	; 200
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	8f 93       	push	r24
 44a:	82 d2       	rcall	.+1284   	; 0x950 <printf>
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	00 92 5f 00 	sts	0x005F, r0
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <pin_output>:
/*                    Pin Manipulation                                  */
/************************************************************************/
#include "pin.h"

void pin_output(struct Pin pin)
{
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	29 97       	sbiw	r28, 0x09	; 9
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	09 83       	std	Y+1, r16	; 0x01
 492:	1a 83       	std	Y+2, r17	; 0x02
 494:	2b 83       	std	Y+3, r18	; 0x03
 496:	3c 83       	std	Y+4, r19	; 0x04
 498:	4d 83       	std	Y+5, r20	; 0x05
 49a:	5e 83       	std	Y+6, r21	; 0x06
 49c:	6f 83       	std	Y+7, r22	; 0x07
 49e:	78 87       	std	Y+8, r23	; 0x08
 4a0:	89 87       	std	Y+9, r24	; 0x09
	//Set pin as an output
	*(pin.Reg) |= _BV(pin.No);
 4a2:	8c 81       	ldd	r24, Y+4	; 0x04
 4a4:	9d 81       	ldd	r25, Y+5	; 0x05
 4a6:	2c 81       	ldd	r18, Y+4	; 0x04
 4a8:	3d 81       	ldd	r19, Y+5	; 0x05
 4aa:	f9 01       	movw	r30, r18
 4ac:	20 81       	ld	r18, Z
 4ae:	62 2f       	mov	r22, r18
 4b0:	29 81       	ldd	r18, Y+1	; 0x01
 4b2:	42 2f       	mov	r20, r18
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	21 e0       	ldi	r18, 0x01	; 1
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	04 2e       	mov	r0, r20
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <pin_output+0x4a>
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <pin_output+0x46>
 4c6:	26 2b       	or	r18, r22
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
}
 4cc:	29 96       	adiw	r28, 0x09	; 9
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	0f 91       	pop	r16
 4e0:	08 95       	ret

000004e2 <pin_low>:
	//Set pin level High
	*(pin.Port) |= _BV(pin.No);
}

void pin_low(struct Pin pin)
{
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	29 97       	sbiw	r28, 0x09	; 9
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	f8 94       	cli
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	cd bf       	out	0x3d, r28	; 61
 4fa:	09 83       	std	Y+1, r16	; 0x01
 4fc:	1a 83       	std	Y+2, r17	; 0x02
 4fe:	2b 83       	std	Y+3, r18	; 0x03
 500:	3c 83       	std	Y+4, r19	; 0x04
 502:	4d 83       	std	Y+5, r20	; 0x05
 504:	5e 83       	std	Y+6, r21	; 0x06
 506:	6f 83       	std	Y+7, r22	; 0x07
 508:	78 87       	std	Y+8, r23	; 0x08
 50a:	89 87       	std	Y+9, r24	; 0x09
	//Set pin level low
	// PORTD &= ~(1 << n); equivalent to ~(_BV(n));
	//PORTD &= ~(1 << n);
	*(pin.Port) &= ~( 1 << (pin.No));
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	9b 81       	ldd	r25, Y+3	; 0x03
 510:	2a 81       	ldd	r18, Y+2	; 0x02
 512:	3b 81       	ldd	r19, Y+3	; 0x03
 514:	f9 01       	movw	r30, r18
 516:	20 81       	ld	r18, Z
 518:	62 2f       	mov	r22, r18
 51a:	29 81       	ldd	r18, Y+1	; 0x01
 51c:	42 2f       	mov	r20, r18
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	04 2e       	mov	r0, r20
 526:	02 c0       	rjmp	.+4      	; 0x52c <pin_low+0x4a>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <pin_low+0x46>
 530:	20 95       	com	r18
 532:	26 23       	and	r18, r22
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
}
 538:	29 96       	adiw	r28, 0x09	; 9
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	08 95       	ret

0000054e <init_OCR_pins>:
/************************************************************************/
/*                      OCR Pins Setup                                  */
/************************************************************************/

void init_OCR_pins()
{
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
	//OCR pins
	pinOCR1A.No = PD5;
 556:	85 e0       	ldi	r24, 0x05	; 5
 558:	80 93 36 01 	sts	0x0136, r24
	pinOCR1A.Port = &PORTD;
 55c:	82 e3       	ldi	r24, 0x32	; 50
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	90 93 38 01 	sts	0x0138, r25
 564:	80 93 37 01 	sts	0x0137, r24
	pinOCR1A.Reg = &DDRD;
 568:	81 e3       	ldi	r24, 0x31	; 49
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	90 93 3a 01 	sts	0x013A, r25
 570:	80 93 39 01 	sts	0x0139, r24
	pinOCR1A.OCReg = &OCR1A;
 574:	8a e4       	ldi	r24, 0x4A	; 74
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	90 93 3e 01 	sts	0x013E, r25
 57c:	80 93 3d 01 	sts	0x013D, r24
	
	pinOCR1B.No = PE2;
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	80 93 48 01 	sts	0x0148, r24
	pinOCR1B.Port = &PORTE;
 586:	87 e2       	ldi	r24, 0x27	; 39
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	90 93 4a 01 	sts	0x014A, r25
 58e:	80 93 49 01 	sts	0x0149, r24
	pinOCR1B.Reg = &DDRE;
 592:	86 e2       	ldi	r24, 0x26	; 38
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	90 93 4c 01 	sts	0x014C, r25
 59a:	80 93 4b 01 	sts	0x014B, r24
	pinOCR1B.OCReg = &OCR1B;
 59e:	88 e4       	ldi	r24, 0x48	; 72
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	90 93 50 01 	sts	0x0150, r25
 5a6:	80 93 4f 01 	sts	0x014F, r24
	pinUnlockedLS.Reg = &DDRA;
	pinUnlockedLS.InputPin = &PINA;
	pin_input(pinUnlockedLS);
		*/
	
}
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <main>:
void init_stuff();
void testing_stuff();


int main(void)
{
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	63 97       	sbiw	r28, 0x13	; 19
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
	
	init_stuff();	
 5c8:	ac d0       	rcall	.+344    	; 0x722 <init_stuff>
	printf("Starting main loop....\r\n");
 5ca:	8f ed       	ldi	r24, 0xDF	; 223
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	d1 d1       	rcall	.+930    	; 0x972 <puts>
	
	
	//For USART Recieve
	FILE *fp;
	fp=stdin; 
 5d0:	80 91 5a 01 	lds	r24, 0x015A
 5d4:	90 91 5b 01 	lds	r25, 0x015B
 5d8:	9b 83       	std	Y+3, r25	; 0x03
 5da:	8a 83       	std	Y+2, r24	; 0x02
	FILE *fpr;
	fpr=stdin;
 5dc:	80 91 5a 01 	lds	r24, 0x015A
 5e0:	90 91 5b 01 	lds	r25, 0x015B
 5e4:	9d 83       	std	Y+5, r25	; 0x05
 5e6:	8c 83       	std	Y+4, r24	; 0x04
	
	//unlock_door();
	//start_pin_pwm(pinOCR1A, 10);
	//pwm_manual(pinOCR1A, fpr);
	//testing_stuff();
	char c = 'a';
 5e8:	81 e6       	ldi	r24, 0x61	; 97
 5ea:	89 83       	std	Y+1, r24	; 0x01
	//pin_high(pinOCR1A);
	//pin_low(pinOCR1B);
	//pin_high(pinOCR1B);
	//DDRD |= (1 << PD5);
	//DDRE &= ~(1 << PE2);	
	while(c != 'q')
 5ec:	0e c0       	rjmp	.+28     	; 0x60a <main+0x5a>
	{
		//Try serial Communcation
		printf("q to quit:");
 5ee:	87 ef       	ldi	r24, 0xF7	; 247
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	89 2f       	mov	r24, r25
 5f4:	8f 93       	push	r24
 5f6:	87 ef       	ldi	r24, 0xF7	; 247
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	8f 93       	push	r24
 5fc:	a9 d1       	rcall	.+850    	; 0x950 <printf>
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
			
			
		//printf("Waiting for input\r\n");
		//_delay_ms(500);
		c = USART_Receive(fpr);
 602:	8c 81       	ldd	r24, Y+4	; 0x04
 604:	9d 81       	ldd	r25, Y+5	; 0x05
 606:	d3 dd       	rcall	.-1114   	; 0x1ae <USART_Receive>
 608:	89 83       	std	Y+1, r24	; 0x01
	//pin_high(pinOCR1A);
	//pin_low(pinOCR1B);
	//pin_high(pinOCR1B);
	//DDRD |= (1 << PD5);
	//DDRE &= ~(1 << PE2);	
	while(c != 'q')
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	81 37       	cpi	r24, 0x71	; 113
 60e:	79 f7       	brne	.-34     	; 0x5ee <main+0x3e>
		//_delay_ms(500);
		c = USART_Receive(fpr);
		
		
	}
	DDRD &= ~( 1 << PD5);
 610:	81 e3       	ldi	r24, 0x31	; 49
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	21 e3       	ldi	r18, 0x31	; 49
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	f9 01       	movw	r30, r18
 61a:	20 81       	ld	r18, Z
 61c:	2f 7d       	andi	r18, 0xDF	; 223
 61e:	fc 01       	movw	r30, r24
 620:	20 83       	st	Z, r18
	DDRE &= ~( 1 << PE2);
 622:	86 e2       	ldi	r24, 0x26	; 38
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	26 e2       	ldi	r18, 0x26	; 38
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	f9 01       	movw	r30, r18
 62c:	20 81       	ld	r18, Z
 62e:	2b 7f       	andi	r18, 0xFB	; 251
 630:	fc 01       	movw	r30, r24
 632:	20 83       	st	Z, r18
	
	
	while(1)
	{	
		
		printf("no active functions running...\r\n");
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	9c d1       	rcall	.+824    	; 0x972 <puts>
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	aa e7       	ldi	r26, 0x7A	; 122
 640:	b4 e4       	ldi	r27, 0x44	; 68
 642:	8e 83       	std	Y+6, r24	; 0x06
 644:	9f 83       	std	Y+7, r25	; 0x07
 646:	a8 87       	std	Y+8, r26	; 0x08
 648:	b9 87       	std	Y+9, r27	; 0x09
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	4a e7       	ldi	r20, 0x7A	; 122
 650:	53 e4       	ldi	r21, 0x43	; 67
 652:	6e 81       	ldd	r22, Y+6	; 0x06
 654:	7f 81       	ldd	r23, Y+7	; 0x07
 656:	88 85       	ldd	r24, Y+8	; 0x08
 658:	99 85       	ldd	r25, Y+9	; 0x09
 65a:	17 d1       	rcall	.+558    	; 0x88a <__mulsf3>
 65c:	dc 01       	movw	r26, r24
 65e:	cb 01       	movw	r24, r22
 660:	8a 87       	std	Y+10, r24	; 0x0a
 662:	9b 87       	std	Y+11, r25	; 0x0b
 664:	ac 87       	std	Y+12, r26	; 0x0c
 666:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	40 e8       	ldi	r20, 0x80	; 128
 66e:	5f e3       	ldi	r21, 0x3F	; 63
 670:	6a 85       	ldd	r22, Y+10	; 0x0a
 672:	7b 85       	ldd	r23, Y+11	; 0x0b
 674:	8c 85       	ldd	r24, Y+12	; 0x0c
 676:	9d 85       	ldd	r25, Y+13	; 0x0d
 678:	5f d0       	rcall	.+190    	; 0x738 <__cmpsf2>
 67a:	88 23       	and	r24, r24
 67c:	2c f4       	brge	.+10     	; 0x688 <main+0xd8>
		__ticks = 1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	9f 87       	std	Y+15, r25	; 0x0f
 684:	8e 87       	std	Y+14, r24	; 0x0e
 686:	3e c0       	rjmp	.+124    	; 0x704 <main+0x154>
	else if (__tmp > 65535)
 688:	20 e0       	ldi	r18, 0x00	; 0
 68a:	3f ef       	ldi	r19, 0xFF	; 255
 68c:	4f e7       	ldi	r20, 0x7F	; 127
 68e:	57 e4       	ldi	r21, 0x47	; 71
 690:	6a 85       	ldd	r22, Y+10	; 0x0a
 692:	7b 85       	ldd	r23, Y+11	; 0x0b
 694:	8c 85       	ldd	r24, Y+12	; 0x0c
 696:	9d 85       	ldd	r25, Y+13	; 0x0d
 698:	f4 d0       	rcall	.+488    	; 0x882 <__gesf2>
 69a:	18 16       	cp	r1, r24
 69c:	54 f5       	brge	.+84     	; 0x6f2 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 e2       	ldi	r20, 0x20	; 32
 6a4:	51 e4       	ldi	r21, 0x41	; 65
 6a6:	6e 81       	ldd	r22, Y+6	; 0x06
 6a8:	7f 81       	ldd	r23, Y+7	; 0x07
 6aa:	88 85       	ldd	r24, Y+8	; 0x08
 6ac:	99 85       	ldd	r25, Y+9	; 0x09
 6ae:	ed d0       	rcall	.+474    	; 0x88a <__mulsf3>
 6b0:	dc 01       	movw	r26, r24
 6b2:	cb 01       	movw	r24, r22
 6b4:	bc 01       	movw	r22, r24
 6b6:	cd 01       	movw	r24, r26
 6b8:	43 d0       	rcall	.+134    	; 0x740 <__fixunssfsi>
 6ba:	dc 01       	movw	r26, r24
 6bc:	cb 01       	movw	r24, r22
 6be:	9f 87       	std	Y+15, r25	; 0x0f
 6c0:	8e 87       	std	Y+14, r24	; 0x0e
 6c2:	12 c0       	rjmp	.+36     	; 0x6e8 <main+0x138>
 6c4:	89 e1       	ldi	r24, 0x19	; 25
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	99 8b       	std	Y+17, r25	; 0x11
 6ca:	88 8b       	std	Y+16, r24	; 0x10
 6cc:	88 89       	ldd	r24, Y+16	; 0x10
 6ce:	99 89       	ldd	r25, Y+17	; 0x11
 6d0:	8c 01       	movw	r16, r24
 6d2:	c8 01       	movw	r24, r16
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <main+0x124>
 6d8:	8c 01       	movw	r16, r24
 6da:	19 8b       	std	Y+17, r17	; 0x11
 6dc:	08 8b       	std	Y+16, r16	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6de:	8e 85       	ldd	r24, Y+14	; 0x0e
 6e0:	9f 85       	ldd	r25, Y+15	; 0x0f
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	9f 87       	std	Y+15, r25	; 0x0f
 6e6:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6e8:	8e 85       	ldd	r24, Y+14	; 0x0e
 6ea:	9f 85       	ldd	r25, Y+15	; 0x0f
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	51 f7       	brne	.-44     	; 0x6c4 <main+0x114>
 6f0:	17 c0       	rjmp	.+46     	; 0x720 <main+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6f2:	6a 85       	ldd	r22, Y+10	; 0x0a
 6f4:	7b 85       	ldd	r23, Y+11	; 0x0b
 6f6:	8c 85       	ldd	r24, Y+12	; 0x0c
 6f8:	9d 85       	ldd	r25, Y+13	; 0x0d
 6fa:	22 d0       	rcall	.+68     	; 0x740 <__fixunssfsi>
 6fc:	dc 01       	movw	r26, r24
 6fe:	cb 01       	movw	r24, r22
 700:	9f 87       	std	Y+15, r25	; 0x0f
 702:	8e 87       	std	Y+14, r24	; 0x0e
 704:	8e 85       	ldd	r24, Y+14	; 0x0e
 706:	9f 85       	ldd	r25, Y+15	; 0x0f
 708:	9b 8b       	std	Y+19, r25	; 0x13
 70a:	8a 8b       	std	Y+18, r24	; 0x12
 70c:	8a 89       	ldd	r24, Y+18	; 0x12
 70e:	9b 89       	ldd	r25, Y+19	; 0x13
 710:	8c 01       	movw	r16, r24
 712:	f8 01       	movw	r30, r16
 714:	31 97       	sbiw	r30, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <main+0x164>
 718:	8f 01       	movw	r16, r30
 71a:	1b 8b       	std	Y+19, r17	; 0x13
 71c:	0a 8b       	std	Y+18, r16	; 0x12
		//testing_stuff();


		
		
	}//end while
 71e:	8a cf       	rjmp	.-236    	; 0x634 <main+0x84>
 720:	89 cf       	rjmp	.-238    	; 0x634 <main+0x84>

00000722 <init_stuff>:
		//pin_low(pinOCR1B);
		
}

void init_stuff()
{
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
	USART_Init(USART_BAUDRATE);
 72a:	83 e3       	ldi	r24, 0x33	; 51
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	ed dc       	rcall	.-1574   	; 0x10a <USART_Init>
	init_hbridge();
 730:	94 dc       	rcall	.-1752   	; 0x5a <init_hbridge>
	//init_hardware_interupt();
		
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <__cmpsf2>:
 738:	2f d0       	rcall	.+94     	; 0x798 <__fp_cmp>
 73a:	08 f4       	brcc	.+2      	; 0x73e <__cmpsf2+0x6>
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	08 95       	ret

00000740 <__fixunssfsi>:
 740:	7f d0       	rcall	.+254    	; 0x840 <__fp_splitA>
 742:	88 f0       	brcs	.+34     	; 0x766 <__fixunssfsi+0x26>
 744:	9f 57       	subi	r25, 0x7F	; 127
 746:	90 f0       	brcs	.+36     	; 0x76c <__fixunssfsi+0x2c>
 748:	b9 2f       	mov	r27, r25
 74a:	99 27       	eor	r25, r25
 74c:	b7 51       	subi	r27, 0x17	; 23
 74e:	a0 f0       	brcs	.+40     	; 0x778 <__fixunssfsi+0x38>
 750:	d1 f0       	breq	.+52     	; 0x786 <__fixunssfsi+0x46>
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	1a f0       	brmi	.+6      	; 0x762 <__fixunssfsi+0x22>
 75c:	ba 95       	dec	r27
 75e:	c9 f7       	brne	.-14     	; 0x752 <__fixunssfsi+0x12>
 760:	12 c0       	rjmp	.+36     	; 0x786 <__fixunssfsi+0x46>
 762:	b1 30       	cpi	r27, 0x01	; 1
 764:	81 f0       	breq	.+32     	; 0x786 <__fixunssfsi+0x46>
 766:	86 d0       	rcall	.+268    	; 0x874 <__fp_zero>
 768:	b1 e0       	ldi	r27, 0x01	; 1
 76a:	08 95       	ret
 76c:	83 c0       	rjmp	.+262    	; 0x874 <__fp_zero>
 76e:	67 2f       	mov	r22, r23
 770:	78 2f       	mov	r23, r24
 772:	88 27       	eor	r24, r24
 774:	b8 5f       	subi	r27, 0xF8	; 248
 776:	39 f0       	breq	.+14     	; 0x786 <__fixunssfsi+0x46>
 778:	b9 3f       	cpi	r27, 0xF9	; 249
 77a:	cc f3       	brlt	.-14     	; 0x76e <__fixunssfsi+0x2e>
 77c:	86 95       	lsr	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b3 95       	inc	r27
 784:	d9 f7       	brne	.-10     	; 0x77c <__fixunssfsi+0x3c>
 786:	3e f4       	brtc	.+14     	; 0x796 <__fixunssfsi+0x56>
 788:	90 95       	com	r25
 78a:	80 95       	com	r24
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	08 95       	ret

00000798 <__fp_cmp>:
 798:	99 0f       	add	r25, r25
 79a:	00 08       	sbc	r0, r0
 79c:	55 0f       	add	r21, r21
 79e:	aa 0b       	sbc	r26, r26
 7a0:	e0 e8       	ldi	r30, 0x80	; 128
 7a2:	fe ef       	ldi	r31, 0xFE	; 254
 7a4:	16 16       	cp	r1, r22
 7a6:	17 06       	cpc	r1, r23
 7a8:	e8 07       	cpc	r30, r24
 7aa:	f9 07       	cpc	r31, r25
 7ac:	c0 f0       	brcs	.+48     	; 0x7de <__fp_cmp+0x46>
 7ae:	12 16       	cp	r1, r18
 7b0:	13 06       	cpc	r1, r19
 7b2:	e4 07       	cpc	r30, r20
 7b4:	f5 07       	cpc	r31, r21
 7b6:	98 f0       	brcs	.+38     	; 0x7de <__fp_cmp+0x46>
 7b8:	62 1b       	sub	r22, r18
 7ba:	73 0b       	sbc	r23, r19
 7bc:	84 0b       	sbc	r24, r20
 7be:	95 0b       	sbc	r25, r21
 7c0:	39 f4       	brne	.+14     	; 0x7d0 <__fp_cmp+0x38>
 7c2:	0a 26       	eor	r0, r26
 7c4:	61 f0       	breq	.+24     	; 0x7de <__fp_cmp+0x46>
 7c6:	23 2b       	or	r18, r19
 7c8:	24 2b       	or	r18, r20
 7ca:	25 2b       	or	r18, r21
 7cc:	21 f4       	brne	.+8      	; 0x7d6 <__fp_cmp+0x3e>
 7ce:	08 95       	ret
 7d0:	0a 26       	eor	r0, r26
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <__fp_cmp+0x3e>
 7d4:	a1 40       	sbci	r26, 0x01	; 1
 7d6:	a6 95       	lsr	r26
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	81 1d       	adc	r24, r1
 7dc:	81 1d       	adc	r24, r1
 7de:	08 95       	ret

000007e0 <__fp_inf>:
 7e0:	97 f9       	bld	r25, 7
 7e2:	9f 67       	ori	r25, 0x7F	; 127
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	08 95       	ret

000007ec <__fp_nan>:
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	08 95       	ret

000007f2 <__fp_pscA>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	09 06       	cpc	r0, r25
 7fe:	08 95       	ret

00000800 <__fp_pscB>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	05 06       	cpc	r0, r21
 80c:	08 95       	ret

0000080e <__fp_round>:
 80e:	09 2e       	mov	r0, r25
 810:	03 94       	inc	r0
 812:	00 0c       	add	r0, r0
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0xc>
 816:	88 23       	and	r24, r24
 818:	52 f0       	brmi	.+20     	; 0x82e <__fp_round+0x20>
 81a:	bb 0f       	add	r27, r27
 81c:	40 f4       	brcc	.+16     	; 0x82e <__fp_round+0x20>
 81e:	bf 2b       	or	r27, r31
 820:	11 f4       	brne	.+4      	; 0x826 <__fp_round+0x18>
 822:	60 ff       	sbrs	r22, 0
 824:	04 c0       	rjmp	.+8      	; 0x82e <__fp_round+0x20>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__fp_split3>:
 830:	57 fd       	sbrc	r21, 7
 832:	90 58       	subi	r25, 0x80	; 128
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	59 f0       	breq	.+22     	; 0x850 <__fp_splitA+0x10>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	71 f0       	breq	.+28     	; 0x85a <__fp_splitA+0x1a>
 83e:	47 95       	ror	r20

00000840 <__fp_splitA>:
 840:	88 0f       	add	r24, r24
 842:	97 fb       	bst	r25, 7
 844:	99 1f       	adc	r25, r25
 846:	61 f0       	breq	.+24     	; 0x860 <__fp_splitA+0x20>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	79 f0       	breq	.+30     	; 0x86a <__fp_splitA+0x2a>
 84c:	87 95       	ror	r24
 84e:	08 95       	ret
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	55 1f       	adc	r21, r21
 858:	f2 cf       	rjmp	.-28     	; 0x83e <__fp_split3+0xe>
 85a:	46 95       	lsr	r20
 85c:	f1 df       	rcall	.-30     	; 0x840 <__fp_splitA>
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__fp_splitA+0x30>
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	18 06       	cpc	r1, r24
 866:	99 1f       	adc	r25, r25
 868:	f1 cf       	rjmp	.-30     	; 0x84c <__fp_splitA+0xc>
 86a:	86 95       	lsr	r24
 86c:	71 05       	cpc	r23, r1
 86e:	61 05       	cpc	r22, r1
 870:	08 94       	sec
 872:	08 95       	ret

00000874 <__fp_zero>:
 874:	e8 94       	clt

00000876 <__fp_szero>:
 876:	bb 27       	eor	r27, r27
 878:	66 27       	eor	r22, r22
 87a:	77 27       	eor	r23, r23
 87c:	cb 01       	movw	r24, r22
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__gesf2>:
 882:	8a df       	rcall	.-236    	; 0x798 <__fp_cmp>
 884:	08 f4       	brcc	.+2      	; 0x888 <__gesf2+0x6>
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	08 95       	ret

0000088a <__mulsf3>:
 88a:	0b d0       	rcall	.+22     	; 0x8a2 <__mulsf3x>
 88c:	c0 cf       	rjmp	.-128    	; 0x80e <__fp_round>
 88e:	b1 df       	rcall	.-158    	; 0x7f2 <__fp_pscA>
 890:	28 f0       	brcs	.+10     	; 0x89c <__mulsf3+0x12>
 892:	b6 df       	rcall	.-148    	; 0x800 <__fp_pscB>
 894:	18 f0       	brcs	.+6      	; 0x89c <__mulsf3+0x12>
 896:	95 23       	and	r25, r21
 898:	09 f0       	breq	.+2      	; 0x89c <__mulsf3+0x12>
 89a:	a2 cf       	rjmp	.-188    	; 0x7e0 <__fp_inf>
 89c:	a7 cf       	rjmp	.-178    	; 0x7ec <__fp_nan>
 89e:	11 24       	eor	r1, r1
 8a0:	ea cf       	rjmp	.-44     	; 0x876 <__fp_szero>

000008a2 <__mulsf3x>:
 8a2:	c6 df       	rcall	.-116    	; 0x830 <__fp_split3>
 8a4:	a0 f3       	brcs	.-24     	; 0x88e <__mulsf3+0x4>

000008a6 <__mulsf3_pse>:
 8a6:	95 9f       	mul	r25, r21
 8a8:	d1 f3       	breq	.-12     	; 0x89e <__mulsf3+0x14>
 8aa:	95 0f       	add	r25, r21
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	55 1f       	adc	r21, r21
 8b0:	62 9f       	mul	r22, r18
 8b2:	f0 01       	movw	r30, r0
 8b4:	72 9f       	mul	r23, r18
 8b6:	bb 27       	eor	r27, r27
 8b8:	f0 0d       	add	r31, r0
 8ba:	b1 1d       	adc	r27, r1
 8bc:	63 9f       	mul	r22, r19
 8be:	aa 27       	eor	r26, r26
 8c0:	f0 0d       	add	r31, r0
 8c2:	b1 1d       	adc	r27, r1
 8c4:	aa 1f       	adc	r26, r26
 8c6:	64 9f       	mul	r22, r20
 8c8:	66 27       	eor	r22, r22
 8ca:	b0 0d       	add	r27, r0
 8cc:	a1 1d       	adc	r26, r1
 8ce:	66 1f       	adc	r22, r22
 8d0:	82 9f       	mul	r24, r18
 8d2:	22 27       	eor	r18, r18
 8d4:	b0 0d       	add	r27, r0
 8d6:	a1 1d       	adc	r26, r1
 8d8:	62 1f       	adc	r22, r18
 8da:	73 9f       	mul	r23, r19
 8dc:	b0 0d       	add	r27, r0
 8de:	a1 1d       	adc	r26, r1
 8e0:	62 1f       	adc	r22, r18
 8e2:	83 9f       	mul	r24, r19
 8e4:	a0 0d       	add	r26, r0
 8e6:	61 1d       	adc	r22, r1
 8e8:	22 1f       	adc	r18, r18
 8ea:	74 9f       	mul	r23, r20
 8ec:	33 27       	eor	r19, r19
 8ee:	a0 0d       	add	r26, r0
 8f0:	61 1d       	adc	r22, r1
 8f2:	23 1f       	adc	r18, r19
 8f4:	84 9f       	mul	r24, r20
 8f6:	60 0d       	add	r22, r0
 8f8:	21 1d       	adc	r18, r1
 8fa:	82 2f       	mov	r24, r18
 8fc:	76 2f       	mov	r23, r22
 8fe:	6a 2f       	mov	r22, r26
 900:	11 24       	eor	r1, r1
 902:	9f 57       	subi	r25, 0x7F	; 127
 904:	50 40       	sbci	r21, 0x00	; 0
 906:	8a f0       	brmi	.+34     	; 0x92a <__mulsf3_pse+0x84>
 908:	e1 f0       	breq	.+56     	; 0x942 <__mulsf3_pse+0x9c>
 90a:	88 23       	and	r24, r24
 90c:	4a f0       	brmi	.+18     	; 0x920 <__mulsf3_pse+0x7a>
 90e:	ee 0f       	add	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	bb 1f       	adc	r27, r27
 914:	66 1f       	adc	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	50 40       	sbci	r21, 0x00	; 0
 91e:	a9 f7       	brne	.-22     	; 0x90a <__mulsf3_pse+0x64>
 920:	9e 3f       	cpi	r25, 0xFE	; 254
 922:	51 05       	cpc	r21, r1
 924:	70 f0       	brcs	.+28     	; 0x942 <__mulsf3_pse+0x9c>
 926:	5c cf       	rjmp	.-328    	; 0x7e0 <__fp_inf>
 928:	a6 cf       	rjmp	.-180    	; 0x876 <__fp_szero>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	ec f3       	brlt	.-6      	; 0x928 <__mulsf3_pse+0x82>
 92e:	98 3e       	cpi	r25, 0xE8	; 232
 930:	dc f3       	brlt	.-10     	; 0x928 <__mulsf3_pse+0x82>
 932:	86 95       	lsr	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	e7 95       	ror	r30
 93e:	9f 5f       	subi	r25, 0xFF	; 255
 940:	c1 f7       	brne	.-16     	; 0x932 <__mulsf3_pse+0x8c>
 942:	fe 2b       	or	r31, r30
 944:	88 0f       	add	r24, r24
 946:	91 1d       	adc	r25, r1
 948:	96 95       	lsr	r25
 94a:	87 95       	ror	r24
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <printf>:
 950:	a0 e0       	ldi	r26, 0x00	; 0
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	ed ea       	ldi	r30, 0xAD	; 173
 956:	f4 e0       	ldi	r31, 0x04	; 4
 958:	b8 c2       	rjmp	.+1392   	; 0xeca <__prologue_saves__+0x20>
 95a:	fe 01       	movw	r30, r28
 95c:	35 96       	adiw	r30, 0x05	; 5
 95e:	61 91       	ld	r22, Z+
 960:	71 91       	ld	r23, Z+
 962:	af 01       	movw	r20, r30
 964:	80 91 5c 01 	lds	r24, 0x015C
 968:	90 91 5d 01 	lds	r25, 0x015D
 96c:	31 d0       	rcall	.+98     	; 0x9d0 <vfprintf>
 96e:	e2 e0       	ldi	r30, 0x02	; 2
 970:	c8 c2       	rjmp	.+1424   	; 0xf02 <__epilogue_restores__+0x20>

00000972 <puts>:
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	8c 01       	movw	r16, r24
 97c:	e0 91 5c 01 	lds	r30, 0x015C
 980:	f0 91 5d 01 	lds	r31, 0x015D
 984:	83 81       	ldd	r24, Z+3	; 0x03
 986:	81 ff       	sbrs	r24, 1
 988:	1b c0       	rjmp	.+54     	; 0x9c0 <puts+0x4e>
 98a:	c0 e0       	ldi	r28, 0x00	; 0
 98c:	d0 e0       	ldi	r29, 0x00	; 0
 98e:	05 c0       	rjmp	.+10     	; 0x99a <puts+0x28>
 990:	09 95       	icall
 992:	89 2b       	or	r24, r25
 994:	11 f0       	breq	.+4      	; 0x99a <puts+0x28>
 996:	cf ef       	ldi	r28, 0xFF	; 255
 998:	df ef       	ldi	r29, 0xFF	; 255
 99a:	f8 01       	movw	r30, r16
 99c:	81 91       	ld	r24, Z+
 99e:	8f 01       	movw	r16, r30
 9a0:	60 91 5c 01 	lds	r22, 0x015C
 9a4:	70 91 5d 01 	lds	r23, 0x015D
 9a8:	db 01       	movw	r26, r22
 9aa:	18 96       	adiw	r26, 0x08	; 8
 9ac:	ed 91       	ld	r30, X+
 9ae:	fc 91       	ld	r31, X
 9b0:	19 97       	sbiw	r26, 0x09	; 9
 9b2:	81 11       	cpse	r24, r1
 9b4:	ed cf       	rjmp	.-38     	; 0x990 <puts+0x1e>
 9b6:	8a e0       	ldi	r24, 0x0A	; 10
 9b8:	09 95       	icall
 9ba:	89 2b       	or	r24, r25
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <puts+0x4e>
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <puts+0x52>
 9c0:	cf ef       	ldi	r28, 0xFF	; 255
 9c2:	df ef       	ldi	r29, 0xFF	; 255
 9c4:	ce 01       	movw	r24, r28
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
 9cc:	0f 91       	pop	r16
 9ce:	08 95       	ret

000009d0 <vfprintf>:
 9d0:	ac e0       	ldi	r26, 0x0C	; 12
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	ed ee       	ldi	r30, 0xED	; 237
 9d6:	f4 e0       	ldi	r31, 0x04	; 4
 9d8:	68 c2       	rjmp	.+1232   	; 0xeaa <__prologue_saves__>
 9da:	7c 01       	movw	r14, r24
 9dc:	6b 01       	movw	r12, r22
 9de:	8a 01       	movw	r16, r20
 9e0:	fc 01       	movw	r30, r24
 9e2:	17 82       	std	Z+7, r1	; 0x07
 9e4:	16 82       	std	Z+6, r1	; 0x06
 9e6:	83 81       	ldd	r24, Z+3	; 0x03
 9e8:	81 ff       	sbrs	r24, 1
 9ea:	b9 c1       	rjmp	.+882    	; 0xd5e <vfprintf+0x38e>
 9ec:	88 24       	eor	r8, r8
 9ee:	83 94       	inc	r8
 9f0:	91 2c       	mov	r9, r1
 9f2:	8c 0e       	add	r8, r28
 9f4:	9d 1e       	adc	r9, r29
 9f6:	f7 01       	movw	r30, r14
 9f8:	93 81       	ldd	r25, Z+3	; 0x03
 9fa:	f6 01       	movw	r30, r12
 9fc:	93 fd       	sbrc	r25, 3
 9fe:	85 91       	lpm	r24, Z+
 a00:	93 ff       	sbrs	r25, 3
 a02:	81 91       	ld	r24, Z+
 a04:	6f 01       	movw	r12, r30
 a06:	88 23       	and	r24, r24
 a08:	09 f4       	brne	.+2      	; 0xa0c <vfprintf+0x3c>
 a0a:	a5 c1       	rjmp	.+842    	; 0xd56 <vfprintf+0x386>
 a0c:	85 32       	cpi	r24, 0x25	; 37
 a0e:	39 f4       	brne	.+14     	; 0xa1e <vfprintf+0x4e>
 a10:	93 fd       	sbrc	r25, 3
 a12:	85 91       	lpm	r24, Z+
 a14:	93 ff       	sbrs	r25, 3
 a16:	81 91       	ld	r24, Z+
 a18:	6f 01       	movw	r12, r30
 a1a:	85 32       	cpi	r24, 0x25	; 37
 a1c:	21 f4       	brne	.+8      	; 0xa26 <vfprintf+0x56>
 a1e:	b7 01       	movw	r22, r14
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	b9 d1       	rcall	.+882    	; 0xd96 <fputc>
 a24:	e8 cf       	rjmp	.-48     	; 0x9f6 <vfprintf+0x26>
 a26:	51 2c       	mov	r5, r1
 a28:	31 2c       	mov	r3, r1
 a2a:	20 e0       	ldi	r18, 0x00	; 0
 a2c:	20 32       	cpi	r18, 0x20	; 32
 a2e:	a8 f4       	brcc	.+42     	; 0xa5a <vfprintf+0x8a>
 a30:	8b 32       	cpi	r24, 0x2B	; 43
 a32:	61 f0       	breq	.+24     	; 0xa4c <vfprintf+0x7c>
 a34:	28 f4       	brcc	.+10     	; 0xa40 <vfprintf+0x70>
 a36:	80 32       	cpi	r24, 0x20	; 32
 a38:	51 f0       	breq	.+20     	; 0xa4e <vfprintf+0x7e>
 a3a:	83 32       	cpi	r24, 0x23	; 35
 a3c:	71 f4       	brne	.+28     	; 0xa5a <vfprintf+0x8a>
 a3e:	0b c0       	rjmp	.+22     	; 0xa56 <vfprintf+0x86>
 a40:	8d 32       	cpi	r24, 0x2D	; 45
 a42:	39 f0       	breq	.+14     	; 0xa52 <vfprintf+0x82>
 a44:	80 33       	cpi	r24, 0x30	; 48
 a46:	49 f4       	brne	.+18     	; 0xa5a <vfprintf+0x8a>
 a48:	21 60       	ori	r18, 0x01	; 1
 a4a:	28 c0       	rjmp	.+80     	; 0xa9c <vfprintf+0xcc>
 a4c:	22 60       	ori	r18, 0x02	; 2
 a4e:	24 60       	ori	r18, 0x04	; 4
 a50:	25 c0       	rjmp	.+74     	; 0xa9c <vfprintf+0xcc>
 a52:	28 60       	ori	r18, 0x08	; 8
 a54:	23 c0       	rjmp	.+70     	; 0xa9c <vfprintf+0xcc>
 a56:	20 61       	ori	r18, 0x10	; 16
 a58:	21 c0       	rjmp	.+66     	; 0xa9c <vfprintf+0xcc>
 a5a:	27 fd       	sbrc	r18, 7
 a5c:	27 c0       	rjmp	.+78     	; 0xaac <vfprintf+0xdc>
 a5e:	38 2f       	mov	r19, r24
 a60:	30 53       	subi	r19, 0x30	; 48
 a62:	3a 30       	cpi	r19, 0x0A	; 10
 a64:	78 f4       	brcc	.+30     	; 0xa84 <vfprintf+0xb4>
 a66:	26 ff       	sbrs	r18, 6
 a68:	06 c0       	rjmp	.+12     	; 0xa76 <vfprintf+0xa6>
 a6a:	fa e0       	ldi	r31, 0x0A	; 10
 a6c:	5f 9e       	mul	r5, r31
 a6e:	30 0d       	add	r19, r0
 a70:	11 24       	eor	r1, r1
 a72:	53 2e       	mov	r5, r19
 a74:	13 c0       	rjmp	.+38     	; 0xa9c <vfprintf+0xcc>
 a76:	8a e0       	ldi	r24, 0x0A	; 10
 a78:	38 9e       	mul	r3, r24
 a7a:	30 0d       	add	r19, r0
 a7c:	11 24       	eor	r1, r1
 a7e:	33 2e       	mov	r3, r19
 a80:	20 62       	ori	r18, 0x20	; 32
 a82:	0c c0       	rjmp	.+24     	; 0xa9c <vfprintf+0xcc>
 a84:	8e 32       	cpi	r24, 0x2E	; 46
 a86:	21 f4       	brne	.+8      	; 0xa90 <vfprintf+0xc0>
 a88:	26 fd       	sbrc	r18, 6
 a8a:	65 c1       	rjmp	.+714    	; 0xd56 <vfprintf+0x386>
 a8c:	20 64       	ori	r18, 0x40	; 64
 a8e:	06 c0       	rjmp	.+12     	; 0xa9c <vfprintf+0xcc>
 a90:	8c 36       	cpi	r24, 0x6C	; 108
 a92:	11 f4       	brne	.+4      	; 0xa98 <vfprintf+0xc8>
 a94:	20 68       	ori	r18, 0x80	; 128
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0xcc>
 a98:	88 36       	cpi	r24, 0x68	; 104
 a9a:	41 f4       	brne	.+16     	; 0xaac <vfprintf+0xdc>
 a9c:	f6 01       	movw	r30, r12
 a9e:	93 fd       	sbrc	r25, 3
 aa0:	85 91       	lpm	r24, Z+
 aa2:	93 ff       	sbrs	r25, 3
 aa4:	81 91       	ld	r24, Z+
 aa6:	6f 01       	movw	r12, r30
 aa8:	81 11       	cpse	r24, r1
 aaa:	c0 cf       	rjmp	.-128    	; 0xa2c <vfprintf+0x5c>
 aac:	98 2f       	mov	r25, r24
 aae:	95 54       	subi	r25, 0x45	; 69
 ab0:	93 30       	cpi	r25, 0x03	; 3
 ab2:	18 f0       	brcs	.+6      	; 0xaba <vfprintf+0xea>
 ab4:	90 52       	subi	r25, 0x20	; 32
 ab6:	93 30       	cpi	r25, 0x03	; 3
 ab8:	28 f4       	brcc	.+10     	; 0xac4 <vfprintf+0xf4>
 aba:	0c 5f       	subi	r16, 0xFC	; 252
 abc:	1f 4f       	sbci	r17, 0xFF	; 255
 abe:	ff e3       	ldi	r31, 0x3F	; 63
 ac0:	f9 83       	std	Y+1, r31	; 0x01
 ac2:	0d c0       	rjmp	.+26     	; 0xade <vfprintf+0x10e>
 ac4:	83 36       	cpi	r24, 0x63	; 99
 ac6:	31 f0       	breq	.+12     	; 0xad4 <vfprintf+0x104>
 ac8:	83 37       	cpi	r24, 0x73	; 115
 aca:	71 f0       	breq	.+28     	; 0xae8 <vfprintf+0x118>
 acc:	83 35       	cpi	r24, 0x53	; 83
 ace:	09 f0       	breq	.+2      	; 0xad2 <vfprintf+0x102>
 ad0:	5a c0       	rjmp	.+180    	; 0xb86 <vfprintf+0x1b6>
 ad2:	22 c0       	rjmp	.+68     	; 0xb18 <vfprintf+0x148>
 ad4:	f8 01       	movw	r30, r16
 ad6:	80 81       	ld	r24, Z
 ad8:	89 83       	std	Y+1, r24	; 0x01
 ada:	0e 5f       	subi	r16, 0xFE	; 254
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	44 24       	eor	r4, r4
 ae0:	43 94       	inc	r4
 ae2:	51 2c       	mov	r5, r1
 ae4:	54 01       	movw	r10, r8
 ae6:	14 c0       	rjmp	.+40     	; 0xb10 <vfprintf+0x140>
 ae8:	38 01       	movw	r6, r16
 aea:	f2 e0       	ldi	r31, 0x02	; 2
 aec:	6f 0e       	add	r6, r31
 aee:	71 1c       	adc	r7, r1
 af0:	f8 01       	movw	r30, r16
 af2:	a0 80       	ld	r10, Z
 af4:	b1 80       	ldd	r11, Z+1	; 0x01
 af6:	26 ff       	sbrs	r18, 6
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <vfprintf+0x130>
 afa:	65 2d       	mov	r22, r5
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <vfprintf+0x134>
 b00:	6f ef       	ldi	r22, 0xFF	; 255
 b02:	7f ef       	ldi	r23, 0xFF	; 255
 b04:	c5 01       	movw	r24, r10
 b06:	2c 87       	std	Y+12, r18	; 0x0c
 b08:	3b d1       	rcall	.+630    	; 0xd80 <strnlen>
 b0a:	2c 01       	movw	r4, r24
 b0c:	83 01       	movw	r16, r6
 b0e:	2c 85       	ldd	r18, Y+12	; 0x0c
 b10:	6f e7       	ldi	r22, 0x7F	; 127
 b12:	26 2e       	mov	r2, r22
 b14:	22 22       	and	r2, r18
 b16:	17 c0       	rjmp	.+46     	; 0xb46 <vfprintf+0x176>
 b18:	38 01       	movw	r6, r16
 b1a:	f2 e0       	ldi	r31, 0x02	; 2
 b1c:	6f 0e       	add	r6, r31
 b1e:	71 1c       	adc	r7, r1
 b20:	f8 01       	movw	r30, r16
 b22:	a0 80       	ld	r10, Z
 b24:	b1 80       	ldd	r11, Z+1	; 0x01
 b26:	26 ff       	sbrs	r18, 6
 b28:	03 c0       	rjmp	.+6      	; 0xb30 <vfprintf+0x160>
 b2a:	65 2d       	mov	r22, r5
 b2c:	70 e0       	ldi	r23, 0x00	; 0
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <vfprintf+0x164>
 b30:	6f ef       	ldi	r22, 0xFF	; 255
 b32:	7f ef       	ldi	r23, 0xFF	; 255
 b34:	c5 01       	movw	r24, r10
 b36:	2c 87       	std	Y+12, r18	; 0x0c
 b38:	18 d1       	rcall	.+560    	; 0xd6a <strnlen_P>
 b3a:	2c 01       	movw	r4, r24
 b3c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b3e:	50 e8       	ldi	r21, 0x80	; 128
 b40:	25 2e       	mov	r2, r21
 b42:	22 2a       	or	r2, r18
 b44:	83 01       	movw	r16, r6
 b46:	23 fc       	sbrc	r2, 3
 b48:	1a c0       	rjmp	.+52     	; 0xb7e <vfprintf+0x1ae>
 b4a:	05 c0       	rjmp	.+10     	; 0xb56 <vfprintf+0x186>
 b4c:	b7 01       	movw	r22, r14
 b4e:	80 e2       	ldi	r24, 0x20	; 32
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	21 d1       	rcall	.+578    	; 0xd96 <fputc>
 b54:	3a 94       	dec	r3
 b56:	83 2d       	mov	r24, r3
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	48 16       	cp	r4, r24
 b5c:	59 06       	cpc	r5, r25
 b5e:	b0 f3       	brcs	.-20     	; 0xb4c <vfprintf+0x17c>
 b60:	0e c0       	rjmp	.+28     	; 0xb7e <vfprintf+0x1ae>
 b62:	f5 01       	movw	r30, r10
 b64:	27 fc       	sbrc	r2, 7
 b66:	85 91       	lpm	r24, Z+
 b68:	27 fe       	sbrs	r2, 7
 b6a:	81 91       	ld	r24, Z+
 b6c:	5f 01       	movw	r10, r30
 b6e:	b7 01       	movw	r22, r14
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	11 d1       	rcall	.+546    	; 0xd96 <fputc>
 b74:	31 10       	cpse	r3, r1
 b76:	3a 94       	dec	r3
 b78:	f1 e0       	ldi	r31, 0x01	; 1
 b7a:	4f 1a       	sub	r4, r31
 b7c:	51 08       	sbc	r5, r1
 b7e:	41 14       	cp	r4, r1
 b80:	51 04       	cpc	r5, r1
 b82:	79 f7       	brne	.-34     	; 0xb62 <vfprintf+0x192>
 b84:	e5 c0       	rjmp	.+458    	; 0xd50 <vfprintf+0x380>
 b86:	84 36       	cpi	r24, 0x64	; 100
 b88:	11 f0       	breq	.+4      	; 0xb8e <vfprintf+0x1be>
 b8a:	89 36       	cpi	r24, 0x69	; 105
 b8c:	39 f5       	brne	.+78     	; 0xbdc <vfprintf+0x20c>
 b8e:	f8 01       	movw	r30, r16
 b90:	27 ff       	sbrs	r18, 7
 b92:	07 c0       	rjmp	.+14     	; 0xba2 <vfprintf+0x1d2>
 b94:	60 81       	ld	r22, Z
 b96:	71 81       	ldd	r23, Z+1	; 0x01
 b98:	82 81       	ldd	r24, Z+2	; 0x02
 b9a:	93 81       	ldd	r25, Z+3	; 0x03
 b9c:	0c 5f       	subi	r16, 0xFC	; 252
 b9e:	1f 4f       	sbci	r17, 0xFF	; 255
 ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <vfprintf+0x1e2>
 ba2:	60 81       	ld	r22, Z
 ba4:	71 81       	ldd	r23, Z+1	; 0x01
 ba6:	88 27       	eor	r24, r24
 ba8:	77 fd       	sbrc	r23, 7
 baa:	80 95       	com	r24
 bac:	98 2f       	mov	r25, r24
 bae:	0e 5f       	subi	r16, 0xFE	; 254
 bb0:	1f 4f       	sbci	r17, 0xFF	; 255
 bb2:	4f e6       	ldi	r20, 0x6F	; 111
 bb4:	b4 2e       	mov	r11, r20
 bb6:	b2 22       	and	r11, r18
 bb8:	97 ff       	sbrs	r25, 7
 bba:	09 c0       	rjmp	.+18     	; 0xbce <vfprintf+0x1fe>
 bbc:	90 95       	com	r25
 bbe:	80 95       	com	r24
 bc0:	70 95       	com	r23
 bc2:	61 95       	neg	r22
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	f0 e8       	ldi	r31, 0x80	; 128
 bcc:	bf 2a       	or	r11, r31
 bce:	2a e0       	ldi	r18, 0x0A	; 10
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	a4 01       	movw	r20, r8
 bd4:	0c d1       	rcall	.+536    	; 0xdee <__ultoa_invert>
 bd6:	a8 2e       	mov	r10, r24
 bd8:	a8 18       	sub	r10, r8
 bda:	42 c0       	rjmp	.+132    	; 0xc60 <vfprintf+0x290>
 bdc:	85 37       	cpi	r24, 0x75	; 117
 bde:	31 f4       	brne	.+12     	; 0xbec <vfprintf+0x21c>
 be0:	3f ee       	ldi	r19, 0xEF	; 239
 be2:	b3 2e       	mov	r11, r19
 be4:	b2 22       	and	r11, r18
 be6:	2a e0       	ldi	r18, 0x0A	; 10
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	24 c0       	rjmp	.+72     	; 0xc34 <vfprintf+0x264>
 bec:	99 ef       	ldi	r25, 0xF9	; 249
 bee:	b9 2e       	mov	r11, r25
 bf0:	b2 22       	and	r11, r18
 bf2:	8f 36       	cpi	r24, 0x6F	; 111
 bf4:	b9 f0       	breq	.+46     	; 0xc24 <vfprintf+0x254>
 bf6:	20 f4       	brcc	.+8      	; 0xc00 <vfprintf+0x230>
 bf8:	88 35       	cpi	r24, 0x58	; 88
 bfa:	09 f0       	breq	.+2      	; 0xbfe <vfprintf+0x22e>
 bfc:	ac c0       	rjmp	.+344    	; 0xd56 <vfprintf+0x386>
 bfe:	0d c0       	rjmp	.+26     	; 0xc1a <vfprintf+0x24a>
 c00:	80 37       	cpi	r24, 0x70	; 112
 c02:	21 f0       	breq	.+8      	; 0xc0c <vfprintf+0x23c>
 c04:	88 37       	cpi	r24, 0x78	; 120
 c06:	09 f0       	breq	.+2      	; 0xc0a <vfprintf+0x23a>
 c08:	a6 c0       	rjmp	.+332    	; 0xd56 <vfprintf+0x386>
 c0a:	02 c0       	rjmp	.+4      	; 0xc10 <vfprintf+0x240>
 c0c:	20 e1       	ldi	r18, 0x10	; 16
 c0e:	b2 2a       	or	r11, r18
 c10:	b4 fe       	sbrs	r11, 4
 c12:	0b c0       	rjmp	.+22     	; 0xc2a <vfprintf+0x25a>
 c14:	84 e0       	ldi	r24, 0x04	; 4
 c16:	b8 2a       	or	r11, r24
 c18:	08 c0       	rjmp	.+16     	; 0xc2a <vfprintf+0x25a>
 c1a:	24 ff       	sbrs	r18, 4
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <vfprintf+0x260>
 c1e:	e6 e0       	ldi	r30, 0x06	; 6
 c20:	be 2a       	or	r11, r30
 c22:	06 c0       	rjmp	.+12     	; 0xc30 <vfprintf+0x260>
 c24:	28 e0       	ldi	r18, 0x08	; 8
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	05 c0       	rjmp	.+10     	; 0xc34 <vfprintf+0x264>
 c2a:	20 e1       	ldi	r18, 0x10	; 16
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <vfprintf+0x264>
 c30:	20 e1       	ldi	r18, 0x10	; 16
 c32:	32 e0       	ldi	r19, 0x02	; 2
 c34:	f8 01       	movw	r30, r16
 c36:	b7 fe       	sbrs	r11, 7
 c38:	07 c0       	rjmp	.+14     	; 0xc48 <vfprintf+0x278>
 c3a:	60 81       	ld	r22, Z
 c3c:	71 81       	ldd	r23, Z+1	; 0x01
 c3e:	82 81       	ldd	r24, Z+2	; 0x02
 c40:	93 81       	ldd	r25, Z+3	; 0x03
 c42:	0c 5f       	subi	r16, 0xFC	; 252
 c44:	1f 4f       	sbci	r17, 0xFF	; 255
 c46:	06 c0       	rjmp	.+12     	; 0xc54 <vfprintf+0x284>
 c48:	60 81       	ld	r22, Z
 c4a:	71 81       	ldd	r23, Z+1	; 0x01
 c4c:	80 e0       	ldi	r24, 0x00	; 0
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	0e 5f       	subi	r16, 0xFE	; 254
 c52:	1f 4f       	sbci	r17, 0xFF	; 255
 c54:	a4 01       	movw	r20, r8
 c56:	cb d0       	rcall	.+406    	; 0xdee <__ultoa_invert>
 c58:	a8 2e       	mov	r10, r24
 c5a:	a8 18       	sub	r10, r8
 c5c:	ff e7       	ldi	r31, 0x7F	; 127
 c5e:	bf 22       	and	r11, r31
 c60:	b6 fe       	sbrs	r11, 6
 c62:	0b c0       	rjmp	.+22     	; 0xc7a <vfprintf+0x2aa>
 c64:	2b 2d       	mov	r18, r11
 c66:	2e 7f       	andi	r18, 0xFE	; 254
 c68:	a5 14       	cp	r10, r5
 c6a:	50 f4       	brcc	.+20     	; 0xc80 <vfprintf+0x2b0>
 c6c:	b4 fe       	sbrs	r11, 4
 c6e:	0a c0       	rjmp	.+20     	; 0xc84 <vfprintf+0x2b4>
 c70:	b2 fc       	sbrc	r11, 2
 c72:	08 c0       	rjmp	.+16     	; 0xc84 <vfprintf+0x2b4>
 c74:	2b 2d       	mov	r18, r11
 c76:	2e 7e       	andi	r18, 0xEE	; 238
 c78:	05 c0       	rjmp	.+10     	; 0xc84 <vfprintf+0x2b4>
 c7a:	7a 2c       	mov	r7, r10
 c7c:	2b 2d       	mov	r18, r11
 c7e:	03 c0       	rjmp	.+6      	; 0xc86 <vfprintf+0x2b6>
 c80:	7a 2c       	mov	r7, r10
 c82:	01 c0       	rjmp	.+2      	; 0xc86 <vfprintf+0x2b6>
 c84:	75 2c       	mov	r7, r5
 c86:	24 ff       	sbrs	r18, 4
 c88:	0d c0       	rjmp	.+26     	; 0xca4 <vfprintf+0x2d4>
 c8a:	fe 01       	movw	r30, r28
 c8c:	ea 0d       	add	r30, r10
 c8e:	f1 1d       	adc	r31, r1
 c90:	80 81       	ld	r24, Z
 c92:	80 33       	cpi	r24, 0x30	; 48
 c94:	11 f4       	brne	.+4      	; 0xc9a <vfprintf+0x2ca>
 c96:	29 7e       	andi	r18, 0xE9	; 233
 c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x2dc>
 c9a:	22 ff       	sbrs	r18, 2
 c9c:	06 c0       	rjmp	.+12     	; 0xcaa <vfprintf+0x2da>
 c9e:	73 94       	inc	r7
 ca0:	73 94       	inc	r7
 ca2:	04 c0       	rjmp	.+8      	; 0xcac <vfprintf+0x2dc>
 ca4:	82 2f       	mov	r24, r18
 ca6:	86 78       	andi	r24, 0x86	; 134
 ca8:	09 f0       	breq	.+2      	; 0xcac <vfprintf+0x2dc>
 caa:	73 94       	inc	r7
 cac:	23 fd       	sbrc	r18, 3
 cae:	13 c0       	rjmp	.+38     	; 0xcd6 <vfprintf+0x306>
 cb0:	20 ff       	sbrs	r18, 0
 cb2:	0e c0       	rjmp	.+28     	; 0xcd0 <vfprintf+0x300>
 cb4:	5a 2c       	mov	r5, r10
 cb6:	73 14       	cp	r7, r3
 cb8:	58 f4       	brcc	.+22     	; 0xcd0 <vfprintf+0x300>
 cba:	53 0c       	add	r5, r3
 cbc:	57 18       	sub	r5, r7
 cbe:	73 2c       	mov	r7, r3
 cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <vfprintf+0x300>
 cc2:	b7 01       	movw	r22, r14
 cc4:	80 e2       	ldi	r24, 0x20	; 32
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	2c 87       	std	Y+12, r18	; 0x0c
 cca:	65 d0       	rcall	.+202    	; 0xd96 <fputc>
 ccc:	73 94       	inc	r7
 cce:	2c 85       	ldd	r18, Y+12	; 0x0c
 cd0:	73 14       	cp	r7, r3
 cd2:	b8 f3       	brcs	.-18     	; 0xcc2 <vfprintf+0x2f2>
 cd4:	04 c0       	rjmp	.+8      	; 0xcde <vfprintf+0x30e>
 cd6:	73 14       	cp	r7, r3
 cd8:	10 f4       	brcc	.+4      	; 0xcde <vfprintf+0x30e>
 cda:	37 18       	sub	r3, r7
 cdc:	01 c0       	rjmp	.+2      	; 0xce0 <vfprintf+0x310>
 cde:	31 2c       	mov	r3, r1
 ce0:	24 ff       	sbrs	r18, 4
 ce2:	11 c0       	rjmp	.+34     	; 0xd06 <vfprintf+0x336>
 ce4:	b7 01       	movw	r22, r14
 ce6:	80 e3       	ldi	r24, 0x30	; 48
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	2c 87       	std	Y+12, r18	; 0x0c
 cec:	54 d0       	rcall	.+168    	; 0xd96 <fputc>
 cee:	2c 85       	ldd	r18, Y+12	; 0x0c
 cf0:	22 ff       	sbrs	r18, 2
 cf2:	1c c0       	rjmp	.+56     	; 0xd2c <vfprintf+0x35c>
 cf4:	21 ff       	sbrs	r18, 1
 cf6:	03 c0       	rjmp	.+6      	; 0xcfe <vfprintf+0x32e>
 cf8:	88 e5       	ldi	r24, 0x58	; 88
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	02 c0       	rjmp	.+4      	; 0xd02 <vfprintf+0x332>
 cfe:	88 e7       	ldi	r24, 0x78	; 120
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	b7 01       	movw	r22, r14
 d04:	0c c0       	rjmp	.+24     	; 0xd1e <vfprintf+0x34e>
 d06:	82 2f       	mov	r24, r18
 d08:	86 78       	andi	r24, 0x86	; 134
 d0a:	81 f0       	breq	.+32     	; 0xd2c <vfprintf+0x35c>
 d0c:	21 fd       	sbrc	r18, 1
 d0e:	02 c0       	rjmp	.+4      	; 0xd14 <vfprintf+0x344>
 d10:	80 e2       	ldi	r24, 0x20	; 32
 d12:	01 c0       	rjmp	.+2      	; 0xd16 <vfprintf+0x346>
 d14:	8b e2       	ldi	r24, 0x2B	; 43
 d16:	27 fd       	sbrc	r18, 7
 d18:	8d e2       	ldi	r24, 0x2D	; 45
 d1a:	b7 01       	movw	r22, r14
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	3b d0       	rcall	.+118    	; 0xd96 <fputc>
 d20:	05 c0       	rjmp	.+10     	; 0xd2c <vfprintf+0x35c>
 d22:	b7 01       	movw	r22, r14
 d24:	80 e3       	ldi	r24, 0x30	; 48
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	36 d0       	rcall	.+108    	; 0xd96 <fputc>
 d2a:	5a 94       	dec	r5
 d2c:	a5 14       	cp	r10, r5
 d2e:	c8 f3       	brcs	.-14     	; 0xd22 <vfprintf+0x352>
 d30:	aa 94       	dec	r10
 d32:	f4 01       	movw	r30, r8
 d34:	ea 0d       	add	r30, r10
 d36:	f1 1d       	adc	r31, r1
 d38:	b7 01       	movw	r22, r14
 d3a:	80 81       	ld	r24, Z
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	2b d0       	rcall	.+86     	; 0xd96 <fputc>
 d40:	a1 10       	cpse	r10, r1
 d42:	f6 cf       	rjmp	.-20     	; 0xd30 <vfprintf+0x360>
 d44:	05 c0       	rjmp	.+10     	; 0xd50 <vfprintf+0x380>
 d46:	b7 01       	movw	r22, r14
 d48:	80 e2       	ldi	r24, 0x20	; 32
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	24 d0       	rcall	.+72     	; 0xd96 <fputc>
 d4e:	3a 94       	dec	r3
 d50:	31 10       	cpse	r3, r1
 d52:	f9 cf       	rjmp	.-14     	; 0xd46 <vfprintf+0x376>
 d54:	50 ce       	rjmp	.-864    	; 0x9f6 <vfprintf+0x26>
 d56:	f7 01       	movw	r30, r14
 d58:	26 81       	ldd	r18, Z+6	; 0x06
 d5a:	37 81       	ldd	r19, Z+7	; 0x07
 d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x392>
 d5e:	2f ef       	ldi	r18, 0xFF	; 255
 d60:	3f ef       	ldi	r19, 0xFF	; 255
 d62:	c9 01       	movw	r24, r18
 d64:	2c 96       	adiw	r28, 0x0c	; 12
 d66:	e2 e1       	ldi	r30, 0x12	; 18
 d68:	bc c0       	rjmp	.+376    	; 0xee2 <__epilogue_restores__>

00000d6a <strnlen_P>:
 d6a:	fc 01       	movw	r30, r24
 d6c:	05 90       	lpm	r0, Z+
 d6e:	61 50       	subi	r22, 0x01	; 1
 d70:	70 40       	sbci	r23, 0x00	; 0
 d72:	01 10       	cpse	r0, r1
 d74:	d8 f7       	brcc	.-10     	; 0xd6c <strnlen_P+0x2>
 d76:	80 95       	com	r24
 d78:	90 95       	com	r25
 d7a:	8e 0f       	add	r24, r30
 d7c:	9f 1f       	adc	r25, r31
 d7e:	08 95       	ret

00000d80 <strnlen>:
 d80:	fc 01       	movw	r30, r24
 d82:	61 50       	subi	r22, 0x01	; 1
 d84:	70 40       	sbci	r23, 0x00	; 0
 d86:	01 90       	ld	r0, Z+
 d88:	01 10       	cpse	r0, r1
 d8a:	d8 f7       	brcc	.-10     	; 0xd82 <strnlen+0x2>
 d8c:	80 95       	com	r24
 d8e:	90 95       	com	r25
 d90:	8e 0f       	add	r24, r30
 d92:	9f 1f       	adc	r25, r31
 d94:	08 95       	ret

00000d96 <fputc>:
 d96:	0f 93       	push	r16
 d98:	1f 93       	push	r17
 d9a:	cf 93       	push	r28
 d9c:	df 93       	push	r29
 d9e:	8c 01       	movw	r16, r24
 da0:	eb 01       	movw	r28, r22
 da2:	8b 81       	ldd	r24, Y+3	; 0x03
 da4:	81 fd       	sbrc	r24, 1
 da6:	03 c0       	rjmp	.+6      	; 0xdae <fputc+0x18>
 da8:	0f ef       	ldi	r16, 0xFF	; 255
 daa:	1f ef       	ldi	r17, 0xFF	; 255
 dac:	1a c0       	rjmp	.+52     	; 0xde2 <fputc+0x4c>
 dae:	82 ff       	sbrs	r24, 2
 db0:	0d c0       	rjmp	.+26     	; 0xdcc <fputc+0x36>
 db2:	2e 81       	ldd	r18, Y+6	; 0x06
 db4:	3f 81       	ldd	r19, Y+7	; 0x07
 db6:	8c 81       	ldd	r24, Y+4	; 0x04
 db8:	9d 81       	ldd	r25, Y+5	; 0x05
 dba:	28 17       	cp	r18, r24
 dbc:	39 07       	cpc	r19, r25
 dbe:	64 f4       	brge	.+24     	; 0xdd8 <fputc+0x42>
 dc0:	e8 81       	ld	r30, Y
 dc2:	f9 81       	ldd	r31, Y+1	; 0x01
 dc4:	01 93       	st	Z+, r16
 dc6:	f9 83       	std	Y+1, r31	; 0x01
 dc8:	e8 83       	st	Y, r30
 dca:	06 c0       	rjmp	.+12     	; 0xdd8 <fputc+0x42>
 dcc:	e8 85       	ldd	r30, Y+8	; 0x08
 dce:	f9 85       	ldd	r31, Y+9	; 0x09
 dd0:	80 2f       	mov	r24, r16
 dd2:	09 95       	icall
 dd4:	89 2b       	or	r24, r25
 dd6:	41 f7       	brne	.-48     	; 0xda8 <fputc+0x12>
 dd8:	8e 81       	ldd	r24, Y+6	; 0x06
 dda:	9f 81       	ldd	r25, Y+7	; 0x07
 ddc:	01 96       	adiw	r24, 0x01	; 1
 dde:	9f 83       	std	Y+7, r25	; 0x07
 de0:	8e 83       	std	Y+6, r24	; 0x06
 de2:	c8 01       	movw	r24, r16
 de4:	df 91       	pop	r29
 de6:	cf 91       	pop	r28
 de8:	1f 91       	pop	r17
 dea:	0f 91       	pop	r16
 dec:	08 95       	ret

00000dee <__ultoa_invert>:
 dee:	fa 01       	movw	r30, r20
 df0:	aa 27       	eor	r26, r26
 df2:	28 30       	cpi	r18, 0x08	; 8
 df4:	51 f1       	breq	.+84     	; 0xe4a <__ultoa_invert+0x5c>
 df6:	20 31       	cpi	r18, 0x10	; 16
 df8:	81 f1       	breq	.+96     	; 0xe5a <__ultoa_invert+0x6c>
 dfa:	e8 94       	clt
 dfc:	6f 93       	push	r22
 dfe:	6e 7f       	andi	r22, 0xFE	; 254
 e00:	6e 5f       	subi	r22, 0xFE	; 254
 e02:	7f 4f       	sbci	r23, 0xFF	; 255
 e04:	8f 4f       	sbci	r24, 0xFF	; 255
 e06:	9f 4f       	sbci	r25, 0xFF	; 255
 e08:	af 4f       	sbci	r26, 0xFF	; 255
 e0a:	b1 e0       	ldi	r27, 0x01	; 1
 e0c:	3e d0       	rcall	.+124    	; 0xe8a <__ultoa_invert+0x9c>
 e0e:	b4 e0       	ldi	r27, 0x04	; 4
 e10:	3c d0       	rcall	.+120    	; 0xe8a <__ultoa_invert+0x9c>
 e12:	67 0f       	add	r22, r23
 e14:	78 1f       	adc	r23, r24
 e16:	89 1f       	adc	r24, r25
 e18:	9a 1f       	adc	r25, r26
 e1a:	a1 1d       	adc	r26, r1
 e1c:	68 0f       	add	r22, r24
 e1e:	79 1f       	adc	r23, r25
 e20:	8a 1f       	adc	r24, r26
 e22:	91 1d       	adc	r25, r1
 e24:	a1 1d       	adc	r26, r1
 e26:	6a 0f       	add	r22, r26
 e28:	71 1d       	adc	r23, r1
 e2a:	81 1d       	adc	r24, r1
 e2c:	91 1d       	adc	r25, r1
 e2e:	a1 1d       	adc	r26, r1
 e30:	20 d0       	rcall	.+64     	; 0xe72 <__ultoa_invert+0x84>
 e32:	09 f4       	brne	.+2      	; 0xe36 <__ultoa_invert+0x48>
 e34:	68 94       	set
 e36:	3f 91       	pop	r19
 e38:	2a e0       	ldi	r18, 0x0A	; 10
 e3a:	26 9f       	mul	r18, r22
 e3c:	11 24       	eor	r1, r1
 e3e:	30 19       	sub	r19, r0
 e40:	30 5d       	subi	r19, 0xD0	; 208
 e42:	31 93       	st	Z+, r19
 e44:	de f6       	brtc	.-74     	; 0xdfc <__ultoa_invert+0xe>
 e46:	cf 01       	movw	r24, r30
 e48:	08 95       	ret
 e4a:	46 2f       	mov	r20, r22
 e4c:	47 70       	andi	r20, 0x07	; 7
 e4e:	40 5d       	subi	r20, 0xD0	; 208
 e50:	41 93       	st	Z+, r20
 e52:	b3 e0       	ldi	r27, 0x03	; 3
 e54:	0f d0       	rcall	.+30     	; 0xe74 <__ultoa_invert+0x86>
 e56:	c9 f7       	brne	.-14     	; 0xe4a <__ultoa_invert+0x5c>
 e58:	f6 cf       	rjmp	.-20     	; 0xe46 <__ultoa_invert+0x58>
 e5a:	46 2f       	mov	r20, r22
 e5c:	4f 70       	andi	r20, 0x0F	; 15
 e5e:	40 5d       	subi	r20, 0xD0	; 208
 e60:	4a 33       	cpi	r20, 0x3A	; 58
 e62:	18 f0       	brcs	.+6      	; 0xe6a <__ultoa_invert+0x7c>
 e64:	49 5d       	subi	r20, 0xD9	; 217
 e66:	31 fd       	sbrc	r19, 1
 e68:	40 52       	subi	r20, 0x20	; 32
 e6a:	41 93       	st	Z+, r20
 e6c:	02 d0       	rcall	.+4      	; 0xe72 <__ultoa_invert+0x84>
 e6e:	a9 f7       	brne	.-22     	; 0xe5a <__ultoa_invert+0x6c>
 e70:	ea cf       	rjmp	.-44     	; 0xe46 <__ultoa_invert+0x58>
 e72:	b4 e0       	ldi	r27, 0x04	; 4
 e74:	a6 95       	lsr	r26
 e76:	97 95       	ror	r25
 e78:	87 95       	ror	r24
 e7a:	77 95       	ror	r23
 e7c:	67 95       	ror	r22
 e7e:	ba 95       	dec	r27
 e80:	c9 f7       	brne	.-14     	; 0xe74 <__ultoa_invert+0x86>
 e82:	00 97       	sbiw	r24, 0x00	; 0
 e84:	61 05       	cpc	r22, r1
 e86:	71 05       	cpc	r23, r1
 e88:	08 95       	ret
 e8a:	9b 01       	movw	r18, r22
 e8c:	ac 01       	movw	r20, r24
 e8e:	0a 2e       	mov	r0, r26
 e90:	06 94       	lsr	r0
 e92:	57 95       	ror	r21
 e94:	47 95       	ror	r20
 e96:	37 95       	ror	r19
 e98:	27 95       	ror	r18
 e9a:	ba 95       	dec	r27
 e9c:	c9 f7       	brne	.-14     	; 0xe90 <__ultoa_invert+0xa2>
 e9e:	62 0f       	add	r22, r18
 ea0:	73 1f       	adc	r23, r19
 ea2:	84 1f       	adc	r24, r20
 ea4:	95 1f       	adc	r25, r21
 ea6:	a0 1d       	adc	r26, r0
 ea8:	08 95       	ret

00000eaa <__prologue_saves__>:
 eaa:	2f 92       	push	r2
 eac:	3f 92       	push	r3
 eae:	4f 92       	push	r4
 eb0:	5f 92       	push	r5
 eb2:	6f 92       	push	r6
 eb4:	7f 92       	push	r7
 eb6:	8f 92       	push	r8
 eb8:	9f 92       	push	r9
 eba:	af 92       	push	r10
 ebc:	bf 92       	push	r11
 ebe:	cf 92       	push	r12
 ec0:	df 92       	push	r13
 ec2:	ef 92       	push	r14
 ec4:	ff 92       	push	r15
 ec6:	0f 93       	push	r16
 ec8:	1f 93       	push	r17
 eca:	cf 93       	push	r28
 ecc:	df 93       	push	r29
 ece:	cd b7       	in	r28, 0x3d	; 61
 ed0:	de b7       	in	r29, 0x3e	; 62
 ed2:	ca 1b       	sub	r28, r26
 ed4:	db 0b       	sbc	r29, r27
 ed6:	0f b6       	in	r0, 0x3f	; 63
 ed8:	f8 94       	cli
 eda:	de bf       	out	0x3e, r29	; 62
 edc:	0f be       	out	0x3f, r0	; 63
 ede:	cd bf       	out	0x3d, r28	; 61
 ee0:	09 94       	ijmp

00000ee2 <__epilogue_restores__>:
 ee2:	2a 88       	ldd	r2, Y+18	; 0x12
 ee4:	39 88       	ldd	r3, Y+17	; 0x11
 ee6:	48 88       	ldd	r4, Y+16	; 0x10
 ee8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eea:	6e 84       	ldd	r6, Y+14	; 0x0e
 eec:	7d 84       	ldd	r7, Y+13	; 0x0d
 eee:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ef4:	b9 84       	ldd	r11, Y+9	; 0x09
 ef6:	c8 84       	ldd	r12, Y+8	; 0x08
 ef8:	df 80       	ldd	r13, Y+7	; 0x07
 efa:	ee 80       	ldd	r14, Y+6	; 0x06
 efc:	fd 80       	ldd	r15, Y+5	; 0x05
 efe:	0c 81       	ldd	r16, Y+4	; 0x04
 f00:	1b 81       	ldd	r17, Y+3	; 0x03
 f02:	aa 81       	ldd	r26, Y+2	; 0x02
 f04:	b9 81       	ldd	r27, Y+1	; 0x01
 f06:	ce 0f       	add	r28, r30
 f08:	d1 1d       	adc	r29, r1
 f0a:	0f b6       	in	r0, 0x3f	; 63
 f0c:	f8 94       	cli
 f0e:	de bf       	out	0x3e, r29	; 62
 f10:	0f be       	out	0x3f, r0	; 63
 f12:	cd bf       	out	0x3d, r28	; 61
 f14:	ed 01       	movw	r28, r26
 f16:	08 95       	ret

00000f18 <_exit>:
 f18:	f8 94       	cli

00000f1a <__stop_program>:
 f1a:	ff cf       	rjmp	.-2      	; 0xf1a <__stop_program>
