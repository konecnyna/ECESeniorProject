
SeniorProjectBLINKLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800124  00800124  00001264  2**0
                  ALLOC
  3 .stab         00002460  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000093e  00000000  00000000  000036c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004002  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000238  00000000  00000000  00004031  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002129  00000000  00000000  00004269  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f27  00000000  00000000  00006392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000152b  00000000  00000000  000072b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  000087e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000062c  00000000  00000000  00008ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000135d  00000000  00000000  00009500  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  0000a85d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		}
	}
}

void pwm_toggle()
{
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	34 c1       	rjmp	.+616    	; 0x26c <__vector_1>
       4:	05 c2       	rjmp	.+1034   	; 0x410 <__vector_2>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	eb c0       	rjmp	.+470    	; 0x1e0 <__vector_4>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
	while(1)
	{
		printf("Start OCR1B\r\n");
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
      2e:	11 e0       	ldi	r17, 0x01	; 1
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	ec e0       	ldi	r30, 0x0C	; 12
      36:	f1 e1       	ldi	r31, 0x11	; 17
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	a4 32       	cpi	r26, 0x24	; 36
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
      44:	21 e0       	ldi	r18, 0x01	; 1
      46:	a4 e2       	ldi	r26, 0x24	; 36
      48:	b1 e0       	ldi	r27, 0x01	; 1
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
	if (__tmp < 1.0)
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	a4 35       	cpi	r26, 0x54	; 84
      50:	b2 07       	cpc	r27, r18
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	e2 d2       	rcall	.+1476   	; 0x61a <main>
      56:	58 c8       	rjmp	.-3920   	; 0xfffff108 <__eeprom_end+0xff7ef108>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <init_hbridge>:
      5a:	0f 93       	push	r16
      5c:	1f 93       	push	r17
      5e:	cf 93       	push	r28
      60:	df 93       	push	r29
		__ticks = 1;
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
      66:	a8 d2       	rcall	.+1360   	; 0x5b8 <init_OCR_pins>
      68:	00 91 2a 01 	lds	r16, 0x012A
	else if (__tmp > 65535)
      6c:	10 91 2b 01 	lds	r17, 0x012B
      70:	20 91 2c 01 	lds	r18, 0x012C
      74:	30 91 2d 01 	lds	r19, 0x012D
      78:	40 91 2e 01 	lds	r20, 0x012E
      7c:	50 91 2f 01 	lds	r21, 0x012F
      80:	60 91 30 01 	lds	r22, 0x0130
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
      84:	70 91 31 01 	lds	r23, 0x0131
      88:	80 91 32 01 	lds	r24, 0x0132
      8c:	5f d2       	rcall	.+1214   	; 0x54c <pin_low>
      8e:	00 91 3c 01 	lds	r16, 0x013C
      92:	10 91 3d 01 	lds	r17, 0x013D
      96:	20 91 3e 01 	lds	r18, 0x013E
      9a:	30 91 3f 01 	lds	r19, 0x013F
      9e:	40 91 40 01 	lds	r20, 0x0140
      a2:	50 91 41 01 	lds	r21, 0x0141
      a6:	60 91 42 01 	lds	r22, 0x0142
      aa:	70 91 43 01 	lds	r23, 0x0143
      ae:	80 91 44 01 	lds	r24, 0x0144
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      b2:	4c d2       	rcall	.+1176   	; 0x54c <pin_low>
      b4:	00 91 2a 01 	lds	r16, 0x012A
      b8:	10 91 2b 01 	lds	r17, 0x012B
      bc:	20 91 2c 01 	lds	r18, 0x012C
      c0:	30 91 2d 01 	lds	r19, 0x012D
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      c4:	40 91 2e 01 	lds	r20, 0x012E
      c8:	50 91 2f 01 	lds	r21, 0x012F
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      cc:	60 91 30 01 	lds	r22, 0x0130
      d0:	70 91 31 01 	lds	r23, 0x0131
      d4:	80 91 32 01 	lds	r24, 0x0132
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
      d8:	cf d1       	rcall	.+926    	; 0x478 <pin_output>
      da:	00 91 3c 01 	lds	r16, 0x013C
      de:	10 91 3d 01 	lds	r17, 0x013D
      e2:	20 91 3e 01 	lds	r18, 0x013E
      e6:	30 91 3f 01 	lds	r19, 0x013F
      ea:	40 91 40 01 	lds	r20, 0x0140
      ee:	50 91 41 01 	lds	r21, 0x0141
      f2:	60 91 42 01 	lds	r22, 0x0142
      f6:	70 91 43 01 	lds	r23, 0x0143
      fa:	80 91 44 01 	lds	r24, 0x0144
      fe:	bc d1       	rcall	.+888    	; 0x478 <pin_output>
     100:	df 91       	pop	r29
		//start_pin_pwm(',30);
		_delay_ms(60000);
		
		printf("Start OCR1A\r\n");
     102:	cf 91       	pop	r28
     104:	1f 91       	pop	r17
     106:	0f 91       	pop	r16
     108:	08 95       	ret

0000010a <USART_Init>:
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	00 d0       	rcall	.+0      	; 0x110 <USART_Init+0x6>
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	9a 83       	std	Y+2, r25	; 0x02
     116:	89 83       	std	Y+1, r24	; 0x01
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     118:	f8 94       	cli
     11a:	80 e4       	ldi	r24, 0x40	; 64
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	29 81       	ldd	r18, Y+1	; 0x01
     120:	3a 81       	ldd	r19, Y+2	; 0x02
     122:	23 2f       	mov	r18, r19
     124:	33 27       	eor	r19, r19
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
     12a:	89 e2       	ldi	r24, 0x29	; 41
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	29 81       	ldd	r18, Y+1	; 0x01
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
     134:	8a e2       	ldi	r24, 0x2A	; 42
	if (__tmp < 1.0)
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	28 e1       	ldi	r18, 0x18	; 24
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	2e e8       	ldi	r18, 0x8E	; 142
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
     148:	80 e6       	ldi	r24, 0x60	; 96
     14a:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     14c:	90 93 4f 01 	sts	0x014F, r25
     150:	80 93 4e 01 	sts	0x014E, r24
     154:	80 e6       	ldi	r24, 0x60	; 96
	else if (__tmp > 65535)
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 51 01 	sts	0x0151, r25
     15c:	80 93 50 01 	sts	0x0150, r24
     160:	78 94       	sei
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <USART_Transmit>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	00 d0       	rcall	.+0      	; 0x172 <USART_Transmit+0x6>
     172:	1f 92       	push	r1
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	89 83       	std	Y+1, r24	; 0x01
     17a:	7b 83       	std	Y+3, r23	; 0x03
     17c:	6a 83       	std	Y+2, r22	; 0x02
     17e:	00 00       	nop
     180:	8b e2       	ldi	r24, 0x2B	; 43
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	80 81       	ld	r24, Z
     188:	88 2f       	mov	r24, r24
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	80 72       	andi	r24, 0x20	; 32
     18e:	99 27       	eor	r25, r25
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	b1 f3       	breq	.-20     	; 0x180 <USART_Transmit+0x14>
     194:	8c e2       	ldi	r24, 0x2C	; 44
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	29 81       	ldd	r18, Y+1	; 0x01
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ac:	08 95       	ret

000001ae <USART_Receive>:
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <USART_Receive+0x6>
     1b4:	cd b7       	in	r28, 0x3d	; 61
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	9a 83       	std	Y+2, r25	; 0x02
     1ba:	89 83       	std	Y+1, r24	; 0x01
     1bc:	00 00       	nop
     1be:	8b e2       	ldi	r24, 0x2B	; 43
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	fc 01       	movw	r30, r24
     1c4:	80 81       	ld	r24, Z
     1c6:	88 23       	and	r24, r24
     1c8:	d4 f7       	brge	.-12     	; 0x1be <USART_Receive+0x10>
     1ca:	8c e2       	ldi	r24, 0x2C	; 44
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	fc 01       	movw	r30, r24
     1d0:	80 81       	ld	r24, Z
     1d2:	88 2f       	mov	r24, r24
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <__vector_4>:
     1e0:	1f 92       	push	r1
     1e2:	0f 92       	push	r0
     1e4:	00 90 5f 00 	lds	r0, 0x005F
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
		//start_pin_pwm('a',30);
		_delay_ms(60000);
	}
     1ec:	2f 93       	push	r18
     1ee:	3f 93       	push	r19



//Timer Interupt
int seconds = 0;
ISR(TIMER1_COMPA_vect){
     1f0:	4f 93       	push	r20
     1f2:	5f 93       	push	r21
     1f4:	6f 93       	push	r22
     1f6:	7f 93       	push	r23
     1f8:	8f 93       	push	r24
     1fa:	9f 93       	push	r25
     1fc:	af 93       	push	r26
     1fe:	bf 93       	push	r27
     200:	ef 93       	push	r30
     202:	ff 93       	push	r31
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
	//OCR1A = (dutyCycle/100.0)*255.0;
	seconds++;
     20c:	80 91 26 01 	lds	r24, 0x0126
     210:	90 91 27 01 	lds	r25, 0x0127
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	90 93 27 01 	sts	0x0127, r25
     21a:	80 93 26 01 	sts	0x0126, r24
	printf("in timer overflow: %d seconds have passed\r\n", seconds);
     21e:	80 91 26 01 	lds	r24, 0x0126
     222:	90 91 27 01 	lds	r25, 0x0127
     226:	29 2f       	mov	r18, r25
     228:	2f 93       	push	r18
     22a:	8f 93       	push	r24
     22c:	8e e6       	ldi	r24, 0x6E	; 110
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	89 2f       	mov	r24, r25
     232:	8f 93       	push	r24
     234:	8e e6       	ldi	r24, 0x6E	; 110
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	8f 93       	push	r24
     23a:	82 d4       	rcall	.+2308   	; 0xb40 <printf>
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
	//_delay_ms(100);
}
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	ff 91       	pop	r31
     24a:	ef 91       	pop	r30
     24c:	bf 91       	pop	r27
     24e:	af 91       	pop	r26
     250:	9f 91       	pop	r25
     252:	8f 91       	pop	r24
     254:	7f 91       	pop	r23
     256:	6f 91       	pop	r22
     258:	5f 91       	pop	r21
     25a:	4f 91       	pop	r20
     25c:	3f 91       	pop	r19
     25e:	2f 91       	pop	r18
     260:	0f 90       	pop	r0
     262:	00 92 5f 00 	sts	0x005F, r0
     266:	0f 90       	pop	r0
     268:	1f 90       	pop	r1
     26a:	18 95       	reti

0000026c <__vector_1>:

//Hardware Interupt
//Async task
int i = 0;
ISR(INT0_vect)
{
     26c:	1f 92       	push	r1
     26e:	0f 92       	push	r0
     270:	00 90 5f 00 	lds	r0, 0x005F
     274:	0f 92       	push	r0
     276:	11 24       	eor	r1, r1
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	2f 93       	push	r18
     27e:	3f 93       	push	r19
     280:	4f 93       	push	r20
     282:	5f 93       	push	r21
     284:	6f 93       	push	r22
     286:	7f 93       	push	r23
     288:	8f 93       	push	r24
     28a:	9f 93       	push	r25
     28c:	af 93       	push	r26
     28e:	bf 93       	push	r27
     290:	ef 93       	push	r30
     292:	ff 93       	push	r31
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	2e 97       	sbiw	r28, 0x0e	; 14
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	a8 e4       	ldi	r26, 0x48	; 72
     2a8:	b2 e4       	ldi	r27, 0x42	; 66
     2aa:	89 83       	std	Y+1, r24	; 0x01
     2ac:	9a 83       	std	Y+2, r25	; 0x02
     2ae:	ab 83       	std	Y+3, r26	; 0x03
     2b0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	4a e7       	ldi	r20, 0x7A	; 122
     2b8:	53 e4       	ldi	r21, 0x43	; 67
     2ba:	69 81       	ldd	r22, Y+1	; 0x01
     2bc:	7a 81       	ldd	r23, Y+2	; 0x02
     2be:	8b 81       	ldd	r24, Y+3	; 0x03
     2c0:	9c 81       	ldd	r25, Y+4	; 0x04
     2c2:	db d3       	rcall	.+1974   	; 0xa7a <__mulsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	8d 83       	std	Y+5, r24	; 0x05
     2ca:	9e 83       	std	Y+6, r25	; 0x06
     2cc:	af 83       	std	Y+7, r26	; 0x07
     2ce:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e8       	ldi	r20, 0x80	; 128
     2d6:	5f e3       	ldi	r21, 0x3F	; 63
     2d8:	6d 81       	ldd	r22, Y+5	; 0x05
     2da:	7e 81       	ldd	r23, Y+6	; 0x06
     2dc:	8f 81       	ldd	r24, Y+7	; 0x07
     2de:	98 85       	ldd	r25, Y+8	; 0x08
     2e0:	23 d3       	rcall	.+1606   	; 0x928 <__cmpsf2>
     2e2:	88 23       	and	r24, r24
     2e4:	2c f4       	brge	.+10     	; 0x2f0 <__vector_1+0x84>
		__ticks = 1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	9a 87       	std	Y+10, r25	; 0x0a
     2ec:	89 87       	std	Y+9, r24	; 0x09
     2ee:	3e c0       	rjmp	.+124    	; 0x36c <__vector_1+0x100>
	else if (__tmp > 65535)
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	3f ef       	ldi	r19, 0xFF	; 255
     2f4:	4f e7       	ldi	r20, 0x7F	; 127
     2f6:	57 e4       	ldi	r21, 0x47	; 71
     2f8:	6d 81       	ldd	r22, Y+5	; 0x05
     2fa:	7e 81       	ldd	r23, Y+6	; 0x06
     2fc:	8f 81       	ldd	r24, Y+7	; 0x07
     2fe:	98 85       	ldd	r25, Y+8	; 0x08
     300:	b8 d3       	rcall	.+1904   	; 0xa72 <__gesf2>
     302:	18 16       	cp	r1, r24
     304:	54 f5       	brge	.+84     	; 0x35a <__vector_1+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e2       	ldi	r20, 0x20	; 32
     30c:	51 e4       	ldi	r21, 0x41	; 65
     30e:	69 81       	ldd	r22, Y+1	; 0x01
     310:	7a 81       	ldd	r23, Y+2	; 0x02
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	9c 81       	ldd	r25, Y+4	; 0x04
     316:	b1 d3       	rcall	.+1890   	; 0xa7a <__mulsf3>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	bc 01       	movw	r22, r24
     31e:	cd 01       	movw	r24, r26
     320:	07 d3       	rcall	.+1550   	; 0x930 <__fixunssfsi>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	9a 87       	std	Y+10, r25	; 0x0a
     328:	89 87       	std	Y+9, r24	; 0x09
     32a:	12 c0       	rjmp	.+36     	; 0x350 <__vector_1+0xe4>
     32c:	89 e1       	ldi	r24, 0x19	; 25
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	9c 87       	std	Y+12, r25	; 0x0c
     332:	8b 87       	std	Y+11, r24	; 0x0b
     334:	8b 85       	ldd	r24, Y+11	; 0x0b
     336:	9c 85       	ldd	r25, Y+12	; 0x0c
     338:	8c 01       	movw	r16, r24
     33a:	c8 01       	movw	r24, r16
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <__vector_1+0xd0>
     340:	8c 01       	movw	r16, r24
     342:	1c 87       	std	Y+12, r17	; 0x0c
     344:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     346:	89 85       	ldd	r24, Y+9	; 0x09
     348:	9a 85       	ldd	r25, Y+10	; 0x0a
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	9a 87       	std	Y+10, r25	; 0x0a
     34e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     350:	89 85       	ldd	r24, Y+9	; 0x09
     352:	9a 85       	ldd	r25, Y+10	; 0x0a
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	51 f7       	brne	.-44     	; 0x32c <__vector_1+0xc0>
     358:	16 c0       	rjmp	.+44     	; 0x386 <__vector_1+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     35a:	6d 81       	ldd	r22, Y+5	; 0x05
     35c:	7e 81       	ldd	r23, Y+6	; 0x06
     35e:	8f 81       	ldd	r24, Y+7	; 0x07
     360:	98 85       	ldd	r25, Y+8	; 0x08
     362:	e6 d2       	rcall	.+1484   	; 0x930 <__fixunssfsi>
     364:	dc 01       	movw	r26, r24
     366:	cb 01       	movw	r24, r22
     368:	9a 87       	std	Y+10, r25	; 0x0a
     36a:	89 87       	std	Y+9, r24	; 0x09
     36c:	89 85       	ldd	r24, Y+9	; 0x09
     36e:	9a 85       	ldd	r25, Y+10	; 0x0a
     370:	9e 87       	std	Y+14, r25	; 0x0e
     372:	8d 87       	std	Y+13, r24	; 0x0d
     374:	8d 85       	ldd	r24, Y+13	; 0x0d
     376:	9e 85       	ldd	r25, Y+14	; 0x0e
     378:	8c 01       	movw	r16, r24
     37a:	c8 01       	movw	r24, r16
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <__vector_1+0x110>
     380:	8c 01       	movw	r16, r24
     382:	1e 87       	std	Y+14, r17	; 0x0e
     384:	0d 87       	std	Y+13, r16	; 0x0d
	//PD2 and PD3 are external interupts.
	_delay_ms(DEBOUNCE_TIME);
	in_progress = FALSE;
     386:	10 92 25 01 	sts	0x0125, r1
     38a:	10 92 24 01 	sts	0x0124, r1
	i++;
     38e:	80 91 28 01 	lds	r24, 0x0128
     392:	90 91 29 01 	lds	r25, 0x0129
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	90 93 29 01 	sts	0x0129, r25
     39c:	80 93 28 01 	sts	0x0128, r24
	printf("In locked HW interrupt %d, In_progress = %d\r\n", i, in_progress);
     3a0:	20 91 24 01 	lds	r18, 0x0124
     3a4:	30 91 25 01 	lds	r19, 0x0125
     3a8:	80 91 28 01 	lds	r24, 0x0128
     3ac:	90 91 29 01 	lds	r25, 0x0129
     3b0:	43 2f       	mov	r20, r19
     3b2:	4f 93       	push	r20
     3b4:	2f 93       	push	r18
     3b6:	29 2f       	mov	r18, r25
     3b8:	2f 93       	push	r18
     3ba:	8f 93       	push	r24
     3bc:	8a e9       	ldi	r24, 0x9A	; 154
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	89 2f       	mov	r24, r25
     3c2:	8f 93       	push	r24
     3c4:	8a e9       	ldi	r24, 0x9A	; 154
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	8f 93       	push	r24
     3ca:	ba d3       	rcall	.+1908   	; 0xb40 <printf>
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
}
     3d8:	2e 96       	adiw	r28, 0x0e	; 14
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	bf 91       	pop	r27
     3ee:	af 91       	pop	r26
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	7f 91       	pop	r23
     3f6:	6f 91       	pop	r22
     3f8:	5f 91       	pop	r21
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	0f 90       	pop	r0
     406:	00 92 5f 00 	sts	0x005F, r0
     40a:	0f 90       	pop	r0
     40c:	1f 90       	pop	r1
     40e:	18 95       	reti

00000410 <__vector_2>:
ISR(INT1_vect)
{
     410:	1f 92       	push	r1
     412:	0f 92       	push	r0
     414:	00 90 5f 00 	lds	r0, 0x005F
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	ef 93       	push	r30
     432:	ff 93       	push	r31
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
	printf("in unlock HW interrupt");
     43c:	88 ec       	ldi	r24, 0xC8	; 200
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	89 2f       	mov	r24, r25
     442:	8f 93       	push	r24
     444:	88 ec       	ldi	r24, 0xC8	; 200
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	8f 93       	push	r24
     44a:	7a d3       	rcall	.+1780   	; 0xb40 <printf>
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	ff 91       	pop	r31
     456:	ef 91       	pop	r30
     458:	bf 91       	pop	r27
     45a:	af 91       	pop	r26
     45c:	9f 91       	pop	r25
     45e:	8f 91       	pop	r24
     460:	7f 91       	pop	r23
     462:	6f 91       	pop	r22
     464:	5f 91       	pop	r21
     466:	4f 91       	pop	r20
     468:	3f 91       	pop	r19
     46a:	2f 91       	pop	r18
     46c:	0f 90       	pop	r0
     46e:	00 92 5f 00 	sts	0x005F, r0
     472:	0f 90       	pop	r0
     474:	1f 90       	pop	r1
     476:	18 95       	reti

00000478 <pin_output>:
/*                    Pin Manipulation                                  */
/************************************************************************/
#include "pin.h"

void pin_output(struct Pin pin)
{
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	29 97       	sbiw	r28, 0x09	; 9
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	09 83       	std	Y+1, r16	; 0x01
     492:	1a 83       	std	Y+2, r17	; 0x02
     494:	2b 83       	std	Y+3, r18	; 0x03
     496:	3c 83       	std	Y+4, r19	; 0x04
     498:	4d 83       	std	Y+5, r20	; 0x05
     49a:	5e 83       	std	Y+6, r21	; 0x06
     49c:	6f 83       	std	Y+7, r22	; 0x07
     49e:	78 87       	std	Y+8, r23	; 0x08
     4a0:	89 87       	std	Y+9, r24	; 0x09
	//Set pin as an output
	*(pin.Reg) |= _BV(pin.No);
     4a2:	8c 81       	ldd	r24, Y+4	; 0x04
     4a4:	9d 81       	ldd	r25, Y+5	; 0x05
     4a6:	2c 81       	ldd	r18, Y+4	; 0x04
     4a8:	3d 81       	ldd	r19, Y+5	; 0x05
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	62 2f       	mov	r22, r18
     4b0:	29 81       	ldd	r18, Y+1	; 0x01
     4b2:	42 2f       	mov	r20, r18
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	04 2e       	mov	r0, r20
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <pin_output+0x4a>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <pin_output+0x46>
     4c6:	26 2b       	or	r18, r22
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
}
     4cc:	29 96       	adiw	r28, 0x09	; 9
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <pin_high>:
	//Set pin as input
	*(pin.Reg) &= ~(_BV(pin.No));
}

void pin_high(struct Pin pin)
{
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	29 97       	sbiw	r28, 0x09	; 9
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	09 83       	std	Y+1, r16	; 0x01
     4fc:	1a 83       	std	Y+2, r17	; 0x02
     4fe:	2b 83       	std	Y+3, r18	; 0x03
     500:	3c 83       	std	Y+4, r19	; 0x04
     502:	4d 83       	std	Y+5, r20	; 0x05
     504:	5e 83       	std	Y+6, r21	; 0x06
     506:	6f 83       	std	Y+7, r22	; 0x07
     508:	78 87       	std	Y+8, r23	; 0x08
     50a:	89 87       	std	Y+9, r24	; 0x09
	//Set pin level High
	*(pin.Port) |= _BV(pin.No);
     50c:	8a 81       	ldd	r24, Y+2	; 0x02
     50e:	9b 81       	ldd	r25, Y+3	; 0x03
     510:	2a 81       	ldd	r18, Y+2	; 0x02
     512:	3b 81       	ldd	r19, Y+3	; 0x03
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	62 2f       	mov	r22, r18
     51a:	29 81       	ldd	r18, Y+1	; 0x01
     51c:	42 2f       	mov	r20, r18
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	21 e0       	ldi	r18, 0x01	; 1
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	04 2e       	mov	r0, r20
     526:	02 c0       	rjmp	.+4      	; 0x52c <pin_high+0x4a>
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	0a 94       	dec	r0
     52e:	e2 f7       	brpl	.-8      	; 0x528 <pin_high+0x46>
     530:	26 2b       	or	r18, r22
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
}
     536:	29 96       	adiw	r28, 0x09	; 9
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <pin_low>:

void pin_low(struct Pin pin)
{
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	29 97       	sbiw	r28, 0x09	; 9
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	09 83       	std	Y+1, r16	; 0x01
     566:	1a 83       	std	Y+2, r17	; 0x02
     568:	2b 83       	std	Y+3, r18	; 0x03
     56a:	3c 83       	std	Y+4, r19	; 0x04
     56c:	4d 83       	std	Y+5, r20	; 0x05
     56e:	5e 83       	std	Y+6, r21	; 0x06
     570:	6f 83       	std	Y+7, r22	; 0x07
     572:	78 87       	std	Y+8, r23	; 0x08
     574:	89 87       	std	Y+9, r24	; 0x09
	//Set pin level low
	// PORTD &= ~(1 << n); equivalent to ~(_BV(n));
	//PORTD &= ~(1 << n);
	*(pin.Port) &= ~( 1 << (pin.No));
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	9b 81       	ldd	r25, Y+3	; 0x03
     57a:	2a 81       	ldd	r18, Y+2	; 0x02
     57c:	3b 81       	ldd	r19, Y+3	; 0x03
     57e:	f9 01       	movw	r30, r18
     580:	20 81       	ld	r18, Z
     582:	62 2f       	mov	r22, r18
     584:	29 81       	ldd	r18, Y+1	; 0x01
     586:	42 2f       	mov	r20, r18
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	04 2e       	mov	r0, r20
     590:	02 c0       	rjmp	.+4      	; 0x596 <pin_low+0x4a>
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	0a 94       	dec	r0
     598:	e2 f7       	brpl	.-8      	; 0x592 <pin_low+0x46>
     59a:	20 95       	com	r18
     59c:	26 23       	and	r18, r22
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
}
     5a2:	29 96       	adiw	r28, 0x09	; 9
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	08 95       	ret

000005b8 <init_OCR_pins>:
/************************************************************************/
/*                      OCR Pins Setup                                  */
/************************************************************************/

void init_OCR_pins()
{
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
	//OCR pins
	pinOCR1A.No = PD5;
     5c0:	85 e0       	ldi	r24, 0x05	; 5
     5c2:	80 93 2a 01 	sts	0x012A, r24
	pinOCR1A.Port = &PORTD;
     5c6:	82 e3       	ldi	r24, 0x32	; 50
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 2c 01 	sts	0x012C, r25
     5ce:	80 93 2b 01 	sts	0x012B, r24
	pinOCR1A.Reg = &DDRD;
     5d2:	81 e3       	ldi	r24, 0x31	; 49
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	90 93 2e 01 	sts	0x012E, r25
     5da:	80 93 2d 01 	sts	0x012D, r24
	pinOCR1A.OCReg = &OCR1A;
     5de:	8a e4       	ldi	r24, 0x4A	; 74
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	90 93 32 01 	sts	0x0132, r25
     5e6:	80 93 31 01 	sts	0x0131, r24
	
	pinOCR1B.No = PE2;
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	80 93 3c 01 	sts	0x013C, r24
	pinOCR1B.Port = &PORTE;
     5f0:	87 e2       	ldi	r24, 0x27	; 39
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	90 93 3e 01 	sts	0x013E, r25
     5f8:	80 93 3d 01 	sts	0x013D, r24
	pinOCR1B.Reg = &DDRE;
     5fc:	86 e2       	ldi	r24, 0x26	; 38
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	90 93 40 01 	sts	0x0140, r25
     604:	80 93 3f 01 	sts	0x013F, r24
	pinOCR1B.OCReg = &OCR1B;
     608:	88 e4       	ldi	r24, 0x48	; 72
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	90 93 44 01 	sts	0x0144, r25
     610:	80 93 43 01 	sts	0x0143, r24
	pinUnlockedLS.Reg = &DDRA;
	pinUnlockedLS.InputPin = &PINA;
	pin_input(pinUnlockedLS);
		*/
	
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <main>:
void init_stuff();
void testing_stuff();


int main(void)
{
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	62 97       	sbiw	r28, 0x12	; 18
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
	
	init_stuff();	
     632:	6f d1       	rcall	.+734    	; 0x912 <init_stuff>
	printf("Starting main loop....\r\n");
     634:	8f ed       	ldi	r24, 0xDF	; 223
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	94 d2       	rcall	.+1320   	; 0xb62 <puts>
	
	
	//For USART Recieve
	FILE *fp;
	fp=stdin; 
     63a:	80 91 4e 01 	lds	r24, 0x014E
     63e:	90 91 4f 01 	lds	r25, 0x014F
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	89 83       	std	Y+1, r24	; 0x01
	FILE *fpr;
	fpr=stdin;
     646:	80 91 4e 01 	lds	r24, 0x014E
     64a:	90 91 4f 01 	lds	r25, 0x014F
     64e:	9c 83       	std	Y+4, r25	; 0x04
     650:	8b 83       	std	Y+3, r24	; 0x03
	


	testing_stuff();
     652:	77 d0       	rcall	.+238    	; 0x742 <testing_stuff>
	
	while(1)
	{	
		
		printf("no active functions running...\r\n");
     654:	87 ef       	ldi	r24, 0xF7	; 247
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	84 d2       	rcall	.+1288   	; 0xb62 <puts>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	aa e7       	ldi	r26, 0x7A	; 122
     660:	b4 e4       	ldi	r27, 0x44	; 68
     662:	8d 83       	std	Y+5, r24	; 0x05
     664:	9e 83       	std	Y+6, r25	; 0x06
     666:	af 83       	std	Y+7, r26	; 0x07
     668:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	4a e7       	ldi	r20, 0x7A	; 122
     670:	53 e4       	ldi	r21, 0x43	; 67
     672:	6d 81       	ldd	r22, Y+5	; 0x05
     674:	7e 81       	ldd	r23, Y+6	; 0x06
     676:	8f 81       	ldd	r24, Y+7	; 0x07
     678:	98 85       	ldd	r25, Y+8	; 0x08
     67a:	ff d1       	rcall	.+1022   	; 0xa7a <__mulsf3>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	89 87       	std	Y+9, r24	; 0x09
     682:	9a 87       	std	Y+10, r25	; 0x0a
     684:	ab 87       	std	Y+11, r26	; 0x0b
     686:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e8       	ldi	r20, 0x80	; 128
     68e:	5f e3       	ldi	r21, 0x3F	; 63
     690:	69 85       	ldd	r22, Y+9	; 0x09
     692:	7a 85       	ldd	r23, Y+10	; 0x0a
     694:	8b 85       	ldd	r24, Y+11	; 0x0b
     696:	9c 85       	ldd	r25, Y+12	; 0x0c
     698:	47 d1       	rcall	.+654    	; 0x928 <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	2c f4       	brge	.+10     	; 0x6a8 <main+0x8e>
		__ticks = 1;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9e 87       	std	Y+14, r25	; 0x0e
     6a4:	8d 87       	std	Y+13, r24	; 0x0d
     6a6:	3e c0       	rjmp	.+124    	; 0x724 <main+0x10a>
	else if (__tmp > 65535)
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	3f ef       	ldi	r19, 0xFF	; 255
     6ac:	4f e7       	ldi	r20, 0x7F	; 127
     6ae:	57 e4       	ldi	r21, 0x47	; 71
     6b0:	69 85       	ldd	r22, Y+9	; 0x09
     6b2:	7a 85       	ldd	r23, Y+10	; 0x0a
     6b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b6:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b8:	dc d1       	rcall	.+952    	; 0xa72 <__gesf2>
     6ba:	18 16       	cp	r1, r24
     6bc:	54 f5       	brge	.+84     	; 0x712 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e2       	ldi	r20, 0x20	; 32
     6c4:	51 e4       	ldi	r21, 0x41	; 65
     6c6:	6d 81       	ldd	r22, Y+5	; 0x05
     6c8:	7e 81       	ldd	r23, Y+6	; 0x06
     6ca:	8f 81       	ldd	r24, Y+7	; 0x07
     6cc:	98 85       	ldd	r25, Y+8	; 0x08
     6ce:	d5 d1       	rcall	.+938    	; 0xa7a <__mulsf3>
     6d0:	dc 01       	movw	r26, r24
     6d2:	cb 01       	movw	r24, r22
     6d4:	bc 01       	movw	r22, r24
     6d6:	cd 01       	movw	r24, r26
     6d8:	2b d1       	rcall	.+598    	; 0x930 <__fixunssfsi>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	9e 87       	std	Y+14, r25	; 0x0e
     6e0:	8d 87       	std	Y+13, r24	; 0x0d
     6e2:	12 c0       	rjmp	.+36     	; 0x708 <main+0xee>
     6e4:	89 e1       	ldi	r24, 0x19	; 25
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	98 8b       	std	Y+16, r25	; 0x10
     6ea:	8f 87       	std	Y+15, r24	; 0x0f
     6ec:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ee:	98 89       	ldd	r25, Y+16	; 0x10
     6f0:	8c 01       	movw	r16, r24
     6f2:	c8 01       	movw	r24, r16
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <main+0xda>
     6f8:	8c 01       	movw	r16, r24
     6fa:	18 8b       	std	Y+16, r17	; 0x10
     6fc:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     700:	9e 85       	ldd	r25, Y+14	; 0x0e
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	9e 87       	std	Y+14, r25	; 0x0e
     706:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     708:	8d 85       	ldd	r24, Y+13	; 0x0d
     70a:	9e 85       	ldd	r25, Y+14	; 0x0e
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	51 f7       	brne	.-44     	; 0x6e4 <main+0xca>
     710:	17 c0       	rjmp	.+46     	; 0x740 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	69 85       	ldd	r22, Y+9	; 0x09
     714:	7a 85       	ldd	r23, Y+10	; 0x0a
     716:	8b 85       	ldd	r24, Y+11	; 0x0b
     718:	9c 85       	ldd	r25, Y+12	; 0x0c
     71a:	0a d1       	rcall	.+532    	; 0x930 <__fixunssfsi>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	9e 87       	std	Y+14, r25	; 0x0e
     722:	8d 87       	std	Y+13, r24	; 0x0d
     724:	8d 85       	ldd	r24, Y+13	; 0x0d
     726:	9e 85       	ldd	r25, Y+14	; 0x0e
     728:	9a 8b       	std	Y+18, r25	; 0x12
     72a:	89 8b       	std	Y+17, r24	; 0x11
     72c:	89 89       	ldd	r24, Y+17	; 0x11
     72e:	9a 89       	ldd	r25, Y+18	; 0x12
     730:	8c 01       	movw	r16, r24
     732:	c8 01       	movw	r24, r16
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <main+0x11a>
     738:	8c 01       	movw	r16, r24
     73a:	1a 8b       	std	Y+18, r17	; 0x12
     73c:	09 8b       	std	Y+17, r16	; 0x11
	


		
		
	}//end while
     73e:	8a cf       	rjmp	.-236    	; 0x654 <main+0x3a>
     740:	89 cf       	rjmp	.-238    	; 0x654 <main+0x3a>

00000742 <testing_stuff>:
	return 0;
	
}//end main


void testing_stuff(){
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	2e 97       	sbiw	r28, 0x0e	; 14
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
	
	
		pin_high(pinOCR1A);
     75a:	00 91 2a 01 	lds	r16, 0x012A
     75e:	10 91 2b 01 	lds	r17, 0x012B
     762:	20 91 2c 01 	lds	r18, 0x012C
     766:	30 91 2d 01 	lds	r19, 0x012D
     76a:	40 91 2e 01 	lds	r20, 0x012E
     76e:	50 91 2f 01 	lds	r21, 0x012F
     772:	60 91 30 01 	lds	r22, 0x0130
     776:	70 91 31 01 	lds	r23, 0x0131
     77a:	80 91 32 01 	lds	r24, 0x0132
     77e:	b1 de       	rcall	.-670    	; 0x4e2 <pin_high>
		pin_high(pinOCR1B);
     780:	00 91 3c 01 	lds	r16, 0x013C
     784:	10 91 3d 01 	lds	r17, 0x013D
     788:	20 91 3e 01 	lds	r18, 0x013E
     78c:	30 91 3f 01 	lds	r19, 0x013F
     790:	40 91 40 01 	lds	r20, 0x0140
     794:	50 91 41 01 	lds	r21, 0x0141
     798:	60 91 42 01 	lds	r22, 0x0142
     79c:	70 91 43 01 	lds	r23, 0x0143
     7a0:	80 91 44 01 	lds	r24, 0x0144
     7a4:	9e de       	rcall	.-708    	; 0x4e2 <pin_high>
		in_progress = TRUE;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	90 93 25 01 	sts	0x0125, r25
     7ae:	80 93 24 01 	sts	0x0124, r24
				
		while(in_progress == TRUE)
     7b2:	75 c0       	rjmp	.+234    	; 0x89e <testing_stuff+0x15c>
		{
			printf("in while...\r\n");
     7b4:	87 e1       	ldi	r24, 0x17	; 23
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	d4 d1       	rcall	.+936    	; 0xb62 <puts>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	aa e7       	ldi	r26, 0x7A	; 122
     7c0:	b4 e4       	ldi	r27, 0x44	; 68
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	ab 83       	std	Y+3, r26	; 0x03
     7c8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	4a e7       	ldi	r20, 0x7A	; 122
     7d0:	53 e4       	ldi	r21, 0x43	; 67
     7d2:	69 81       	ldd	r22, Y+1	; 0x01
     7d4:	7a 81       	ldd	r23, Y+2	; 0x02
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	4f d1       	rcall	.+670    	; 0xa7a <__mulsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	8d 83       	std	Y+5, r24	; 0x05
     7e2:	9e 83       	std	Y+6, r25	; 0x06
     7e4:	af 83       	std	Y+7, r26	; 0x07
     7e6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 e8       	ldi	r20, 0x80	; 128
     7ee:	5f e3       	ldi	r21, 0x3F	; 63
     7f0:	6d 81       	ldd	r22, Y+5	; 0x05
     7f2:	7e 81       	ldd	r23, Y+6	; 0x06
     7f4:	8f 81       	ldd	r24, Y+7	; 0x07
     7f6:	98 85       	ldd	r25, Y+8	; 0x08
     7f8:	97 d0       	rcall	.+302    	; 0x928 <__cmpsf2>
     7fa:	88 23       	and	r24, r24
     7fc:	2c f4       	brge	.+10     	; 0x808 <testing_stuff+0xc6>
		__ticks = 1;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	9a 87       	std	Y+10, r25	; 0x0a
     804:	89 87       	std	Y+9, r24	; 0x09
     806:	3e c0       	rjmp	.+124    	; 0x884 <testing_stuff+0x142>
	else if (__tmp > 65535)
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	3f ef       	ldi	r19, 0xFF	; 255
     80c:	4f e7       	ldi	r20, 0x7F	; 127
     80e:	57 e4       	ldi	r21, 0x47	; 71
     810:	6d 81       	ldd	r22, Y+5	; 0x05
     812:	7e 81       	ldd	r23, Y+6	; 0x06
     814:	8f 81       	ldd	r24, Y+7	; 0x07
     816:	98 85       	ldd	r25, Y+8	; 0x08
     818:	2c d1       	rcall	.+600    	; 0xa72 <__gesf2>
     81a:	18 16       	cp	r1, r24
     81c:	54 f5       	brge	.+84     	; 0x872 <testing_stuff+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 e2       	ldi	r20, 0x20	; 32
     824:	51 e4       	ldi	r21, 0x41	; 65
     826:	69 81       	ldd	r22, Y+1	; 0x01
     828:	7a 81       	ldd	r23, Y+2	; 0x02
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	9c 81       	ldd	r25, Y+4	; 0x04
     82e:	25 d1       	rcall	.+586    	; 0xa7a <__mulsf3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	bc 01       	movw	r22, r24
     836:	cd 01       	movw	r24, r26
     838:	7b d0       	rcall	.+246    	; 0x930 <__fixunssfsi>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	9a 87       	std	Y+10, r25	; 0x0a
     840:	89 87       	std	Y+9, r24	; 0x09
     842:	12 c0       	rjmp	.+36     	; 0x868 <testing_stuff+0x126>
     844:	89 e1       	ldi	r24, 0x19	; 25
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	9c 87       	std	Y+12, r25	; 0x0c
     84a:	8b 87       	std	Y+11, r24	; 0x0b
     84c:	8b 85       	ldd	r24, Y+11	; 0x0b
     84e:	9c 85       	ldd	r25, Y+12	; 0x0c
     850:	8c 01       	movw	r16, r24
     852:	c8 01       	movw	r24, r16
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <testing_stuff+0x112>
     858:	8c 01       	movw	r16, r24
     85a:	1c 87       	std	Y+12, r17	; 0x0c
     85c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     85e:	89 85       	ldd	r24, Y+9	; 0x09
     860:	9a 85       	ldd	r25, Y+10	; 0x0a
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	9a 87       	std	Y+10, r25	; 0x0a
     866:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     868:	89 85       	ldd	r24, Y+9	; 0x09
     86a:	9a 85       	ldd	r25, Y+10	; 0x0a
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	51 f7       	brne	.-44     	; 0x844 <testing_stuff+0x102>
     870:	16 c0       	rjmp	.+44     	; 0x89e <testing_stuff+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     872:	6d 81       	ldd	r22, Y+5	; 0x05
     874:	7e 81       	ldd	r23, Y+6	; 0x06
     876:	8f 81       	ldd	r24, Y+7	; 0x07
     878:	98 85       	ldd	r25, Y+8	; 0x08
     87a:	5a d0       	rcall	.+180    	; 0x930 <__fixunssfsi>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	9a 87       	std	Y+10, r25	; 0x0a
     882:	89 87       	std	Y+9, r24	; 0x09
     884:	89 85       	ldd	r24, Y+9	; 0x09
     886:	9a 85       	ldd	r25, Y+10	; 0x0a
     888:	9e 87       	std	Y+14, r25	; 0x0e
     88a:	8d 87       	std	Y+13, r24	; 0x0d
     88c:	8d 85       	ldd	r24, Y+13	; 0x0d
     88e:	9e 85       	ldd	r25, Y+14	; 0x0e
     890:	8c 01       	movw	r16, r24
     892:	c8 01       	movw	r24, r16
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <testing_stuff+0x152>
     898:	8c 01       	movw	r16, r24
     89a:	1e 87       	std	Y+14, r17	; 0x0e
     89c:	0d 87       	std	Y+13, r16	; 0x0d
	
		pin_high(pinOCR1A);
		pin_high(pinOCR1B);
		in_progress = TRUE;
				
		while(in_progress == TRUE)
     89e:	80 91 24 01 	lds	r24, 0x0124
     8a2:	90 91 25 01 	lds	r25, 0x0125
     8a6:	81 30       	cpi	r24, 0x01	; 1
     8a8:	91 05       	cpc	r25, r1
     8aa:	09 f4       	brne	.+2      	; 0x8ae <testing_stuff+0x16c>
     8ac:	83 cf       	rjmp	.-250    	; 0x7b4 <testing_stuff+0x72>
		{
			printf("in while...\r\n");
			_delay_ms(1000);
		}
		pin_low(pinOCR1A);
     8ae:	00 91 2a 01 	lds	r16, 0x012A
     8b2:	10 91 2b 01 	lds	r17, 0x012B
     8b6:	20 91 2c 01 	lds	r18, 0x012C
     8ba:	30 91 2d 01 	lds	r19, 0x012D
     8be:	40 91 2e 01 	lds	r20, 0x012E
     8c2:	50 91 2f 01 	lds	r21, 0x012F
     8c6:	60 91 30 01 	lds	r22, 0x0130
     8ca:	70 91 31 01 	lds	r23, 0x0131
     8ce:	80 91 32 01 	lds	r24, 0x0132
     8d2:	3c de       	rcall	.-904    	; 0x54c <pin_low>
		pin_low(pinOCR1B);
     8d4:	00 91 3c 01 	lds	r16, 0x013C
     8d8:	10 91 3d 01 	lds	r17, 0x013D
     8dc:	20 91 3e 01 	lds	r18, 0x013E
     8e0:	30 91 3f 01 	lds	r19, 0x013F
     8e4:	40 91 40 01 	lds	r20, 0x0140
     8e8:	50 91 41 01 	lds	r21, 0x0141
     8ec:	60 91 42 01 	lds	r22, 0x0142
     8f0:	70 91 43 01 	lds	r23, 0x0143
     8f4:	80 91 44 01 	lds	r24, 0x0144
     8f8:	29 de       	rcall	.-942    	; 0x54c <pin_low>
		return 0;	
     8fa:	00 00       	nop
		//_delay_ms(5000);	
}
     8fc:	2e 96       	adiw	r28, 0x0e	; 14
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	08 95       	ret

00000912 <init_stuff>:

void init_stuff()
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
	USART_Init(USART_BAUDRATE);
     91a:	83 e3       	ldi	r24, 0x33	; 51
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	f5 db       	rcall	.-2070   	; 0x10a <USART_Init>
	init_hbridge();
     920:	9c db       	rcall	.-2248   	; 0x5a <init_hbridge>
	//init_hardware_interupt();
		
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <__cmpsf2>:
     928:	2f d0       	rcall	.+94     	; 0x988 <__fp_cmp>
     92a:	08 f4       	brcc	.+2      	; 0x92e <__cmpsf2+0x6>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	08 95       	ret

00000930 <__fixunssfsi>:
     930:	7f d0       	rcall	.+254    	; 0xa30 <__fp_splitA>
     932:	88 f0       	brcs	.+34     	; 0x956 <__fixunssfsi+0x26>
     934:	9f 57       	subi	r25, 0x7F	; 127
     936:	90 f0       	brcs	.+36     	; 0x95c <__fixunssfsi+0x2c>
     938:	b9 2f       	mov	r27, r25
     93a:	99 27       	eor	r25, r25
     93c:	b7 51       	subi	r27, 0x17	; 23
     93e:	a0 f0       	brcs	.+40     	; 0x968 <__fixunssfsi+0x38>
     940:	d1 f0       	breq	.+52     	; 0x976 <__fixunssfsi+0x46>
     942:	66 0f       	add	r22, r22
     944:	77 1f       	adc	r23, r23
     946:	88 1f       	adc	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	1a f0       	brmi	.+6      	; 0x952 <__fixunssfsi+0x22>
     94c:	ba 95       	dec	r27
     94e:	c9 f7       	brne	.-14     	; 0x942 <__fixunssfsi+0x12>
     950:	12 c0       	rjmp	.+36     	; 0x976 <__fixunssfsi+0x46>
     952:	b1 30       	cpi	r27, 0x01	; 1
     954:	81 f0       	breq	.+32     	; 0x976 <__fixunssfsi+0x46>
     956:	86 d0       	rcall	.+268    	; 0xa64 <__fp_zero>
     958:	b1 e0       	ldi	r27, 0x01	; 1
     95a:	08 95       	ret
     95c:	83 c0       	rjmp	.+262    	; 0xa64 <__fp_zero>
     95e:	67 2f       	mov	r22, r23
     960:	78 2f       	mov	r23, r24
     962:	88 27       	eor	r24, r24
     964:	b8 5f       	subi	r27, 0xF8	; 248
     966:	39 f0       	breq	.+14     	; 0x976 <__fixunssfsi+0x46>
     968:	b9 3f       	cpi	r27, 0xF9	; 249
     96a:	cc f3       	brlt	.-14     	; 0x95e <__fixunssfsi+0x2e>
     96c:	86 95       	lsr	r24
     96e:	77 95       	ror	r23
     970:	67 95       	ror	r22
     972:	b3 95       	inc	r27
     974:	d9 f7       	brne	.-10     	; 0x96c <__fixunssfsi+0x3c>
     976:	3e f4       	brtc	.+14     	; 0x986 <__fixunssfsi+0x56>
     978:	90 95       	com	r25
     97a:	80 95       	com	r24
     97c:	70 95       	com	r23
     97e:	61 95       	neg	r22
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	8f 4f       	sbci	r24, 0xFF	; 255
     984:	9f 4f       	sbci	r25, 0xFF	; 255
     986:	08 95       	ret

00000988 <__fp_cmp>:
     988:	99 0f       	add	r25, r25
     98a:	00 08       	sbc	r0, r0
     98c:	55 0f       	add	r21, r21
     98e:	aa 0b       	sbc	r26, r26
     990:	e0 e8       	ldi	r30, 0x80	; 128
     992:	fe ef       	ldi	r31, 0xFE	; 254
     994:	16 16       	cp	r1, r22
     996:	17 06       	cpc	r1, r23
     998:	e8 07       	cpc	r30, r24
     99a:	f9 07       	cpc	r31, r25
     99c:	c0 f0       	brcs	.+48     	; 0x9ce <__fp_cmp+0x46>
     99e:	12 16       	cp	r1, r18
     9a0:	13 06       	cpc	r1, r19
     9a2:	e4 07       	cpc	r30, r20
     9a4:	f5 07       	cpc	r31, r21
     9a6:	98 f0       	brcs	.+38     	; 0x9ce <__fp_cmp+0x46>
     9a8:	62 1b       	sub	r22, r18
     9aa:	73 0b       	sbc	r23, r19
     9ac:	84 0b       	sbc	r24, r20
     9ae:	95 0b       	sbc	r25, r21
     9b0:	39 f4       	brne	.+14     	; 0x9c0 <__fp_cmp+0x38>
     9b2:	0a 26       	eor	r0, r26
     9b4:	61 f0       	breq	.+24     	; 0x9ce <__fp_cmp+0x46>
     9b6:	23 2b       	or	r18, r19
     9b8:	24 2b       	or	r18, r20
     9ba:	25 2b       	or	r18, r21
     9bc:	21 f4       	brne	.+8      	; 0x9c6 <__fp_cmp+0x3e>
     9be:	08 95       	ret
     9c0:	0a 26       	eor	r0, r26
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <__fp_cmp+0x3e>
     9c4:	a1 40       	sbci	r26, 0x01	; 1
     9c6:	a6 95       	lsr	r26
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	81 1d       	adc	r24, r1
     9cc:	81 1d       	adc	r24, r1
     9ce:	08 95       	ret

000009d0 <__fp_inf>:
     9d0:	97 f9       	bld	r25, 7
     9d2:	9f 67       	ori	r25, 0x7F	; 127
     9d4:	80 e8       	ldi	r24, 0x80	; 128
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	08 95       	ret

000009dc <__fp_nan>:
     9dc:	9f ef       	ldi	r25, 0xFF	; 255
     9de:	80 ec       	ldi	r24, 0xC0	; 192
     9e0:	08 95       	ret

000009e2 <__fp_pscA>:
     9e2:	00 24       	eor	r0, r0
     9e4:	0a 94       	dec	r0
     9e6:	16 16       	cp	r1, r22
     9e8:	17 06       	cpc	r1, r23
     9ea:	18 06       	cpc	r1, r24
     9ec:	09 06       	cpc	r0, r25
     9ee:	08 95       	ret

000009f0 <__fp_pscB>:
     9f0:	00 24       	eor	r0, r0
     9f2:	0a 94       	dec	r0
     9f4:	12 16       	cp	r1, r18
     9f6:	13 06       	cpc	r1, r19
     9f8:	14 06       	cpc	r1, r20
     9fa:	05 06       	cpc	r0, r21
     9fc:	08 95       	ret

000009fe <__fp_round>:
     9fe:	09 2e       	mov	r0, r25
     a00:	03 94       	inc	r0
     a02:	00 0c       	add	r0, r0
     a04:	11 f4       	brne	.+4      	; 0xa0a <__fp_round+0xc>
     a06:	88 23       	and	r24, r24
     a08:	52 f0       	brmi	.+20     	; 0xa1e <__fp_round+0x20>
     a0a:	bb 0f       	add	r27, r27
     a0c:	40 f4       	brcc	.+16     	; 0xa1e <__fp_round+0x20>
     a0e:	bf 2b       	or	r27, r31
     a10:	11 f4       	brne	.+4      	; 0xa16 <__fp_round+0x18>
     a12:	60 ff       	sbrs	r22, 0
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fp_round+0x20>
     a16:	6f 5f       	subi	r22, 0xFF	; 255
     a18:	7f 4f       	sbci	r23, 0xFF	; 255
     a1a:	8f 4f       	sbci	r24, 0xFF	; 255
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	08 95       	ret

00000a20 <__fp_split3>:
     a20:	57 fd       	sbrc	r21, 7
     a22:	90 58       	subi	r25, 0x80	; 128
     a24:	44 0f       	add	r20, r20
     a26:	55 1f       	adc	r21, r21
     a28:	59 f0       	breq	.+22     	; 0xa40 <__fp_splitA+0x10>
     a2a:	5f 3f       	cpi	r21, 0xFF	; 255
     a2c:	71 f0       	breq	.+28     	; 0xa4a <__fp_splitA+0x1a>
     a2e:	47 95       	ror	r20

00000a30 <__fp_splitA>:
     a30:	88 0f       	add	r24, r24
     a32:	97 fb       	bst	r25, 7
     a34:	99 1f       	adc	r25, r25
     a36:	61 f0       	breq	.+24     	; 0xa50 <__fp_splitA+0x20>
     a38:	9f 3f       	cpi	r25, 0xFF	; 255
     a3a:	79 f0       	breq	.+30     	; 0xa5a <__fp_splitA+0x2a>
     a3c:	87 95       	ror	r24
     a3e:	08 95       	ret
     a40:	12 16       	cp	r1, r18
     a42:	13 06       	cpc	r1, r19
     a44:	14 06       	cpc	r1, r20
     a46:	55 1f       	adc	r21, r21
     a48:	f2 cf       	rjmp	.-28     	; 0xa2e <__fp_split3+0xe>
     a4a:	46 95       	lsr	r20
     a4c:	f1 df       	rcall	.-30     	; 0xa30 <__fp_splitA>
     a4e:	08 c0       	rjmp	.+16     	; 0xa60 <__fp_splitA+0x30>
     a50:	16 16       	cp	r1, r22
     a52:	17 06       	cpc	r1, r23
     a54:	18 06       	cpc	r1, r24
     a56:	99 1f       	adc	r25, r25
     a58:	f1 cf       	rjmp	.-30     	; 0xa3c <__fp_splitA+0xc>
     a5a:	86 95       	lsr	r24
     a5c:	71 05       	cpc	r23, r1
     a5e:	61 05       	cpc	r22, r1
     a60:	08 94       	sec
     a62:	08 95       	ret

00000a64 <__fp_zero>:
     a64:	e8 94       	clt

00000a66 <__fp_szero>:
     a66:	bb 27       	eor	r27, r27
     a68:	66 27       	eor	r22, r22
     a6a:	77 27       	eor	r23, r23
     a6c:	cb 01       	movw	r24, r22
     a6e:	97 f9       	bld	r25, 7
     a70:	08 95       	ret

00000a72 <__gesf2>:
     a72:	8a df       	rcall	.-236    	; 0x988 <__fp_cmp>
     a74:	08 f4       	brcc	.+2      	; 0xa78 <__gesf2+0x6>
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	08 95       	ret

00000a7a <__mulsf3>:
     a7a:	0b d0       	rcall	.+22     	; 0xa92 <__mulsf3x>
     a7c:	c0 cf       	rjmp	.-128    	; 0x9fe <__fp_round>
     a7e:	b1 df       	rcall	.-158    	; 0x9e2 <__fp_pscA>
     a80:	28 f0       	brcs	.+10     	; 0xa8c <__mulsf3+0x12>
     a82:	b6 df       	rcall	.-148    	; 0x9f0 <__fp_pscB>
     a84:	18 f0       	brcs	.+6      	; 0xa8c <__mulsf3+0x12>
     a86:	95 23       	and	r25, r21
     a88:	09 f0       	breq	.+2      	; 0xa8c <__mulsf3+0x12>
     a8a:	a2 cf       	rjmp	.-188    	; 0x9d0 <__fp_inf>
     a8c:	a7 cf       	rjmp	.-178    	; 0x9dc <__fp_nan>
     a8e:	11 24       	eor	r1, r1
     a90:	ea cf       	rjmp	.-44     	; 0xa66 <__fp_szero>

00000a92 <__mulsf3x>:
     a92:	c6 df       	rcall	.-116    	; 0xa20 <__fp_split3>
     a94:	a0 f3       	brcs	.-24     	; 0xa7e <__mulsf3+0x4>

00000a96 <__mulsf3_pse>:
     a96:	95 9f       	mul	r25, r21
     a98:	d1 f3       	breq	.-12     	; 0xa8e <__mulsf3+0x14>
     a9a:	95 0f       	add	r25, r21
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	55 1f       	adc	r21, r21
     aa0:	62 9f       	mul	r22, r18
     aa2:	f0 01       	movw	r30, r0
     aa4:	72 9f       	mul	r23, r18
     aa6:	bb 27       	eor	r27, r27
     aa8:	f0 0d       	add	r31, r0
     aaa:	b1 1d       	adc	r27, r1
     aac:	63 9f       	mul	r22, r19
     aae:	aa 27       	eor	r26, r26
     ab0:	f0 0d       	add	r31, r0
     ab2:	b1 1d       	adc	r27, r1
     ab4:	aa 1f       	adc	r26, r26
     ab6:	64 9f       	mul	r22, r20
     ab8:	66 27       	eor	r22, r22
     aba:	b0 0d       	add	r27, r0
     abc:	a1 1d       	adc	r26, r1
     abe:	66 1f       	adc	r22, r22
     ac0:	82 9f       	mul	r24, r18
     ac2:	22 27       	eor	r18, r18
     ac4:	b0 0d       	add	r27, r0
     ac6:	a1 1d       	adc	r26, r1
     ac8:	62 1f       	adc	r22, r18
     aca:	73 9f       	mul	r23, r19
     acc:	b0 0d       	add	r27, r0
     ace:	a1 1d       	adc	r26, r1
     ad0:	62 1f       	adc	r22, r18
     ad2:	83 9f       	mul	r24, r19
     ad4:	a0 0d       	add	r26, r0
     ad6:	61 1d       	adc	r22, r1
     ad8:	22 1f       	adc	r18, r18
     ada:	74 9f       	mul	r23, r20
     adc:	33 27       	eor	r19, r19
     ade:	a0 0d       	add	r26, r0
     ae0:	61 1d       	adc	r22, r1
     ae2:	23 1f       	adc	r18, r19
     ae4:	84 9f       	mul	r24, r20
     ae6:	60 0d       	add	r22, r0
     ae8:	21 1d       	adc	r18, r1
     aea:	82 2f       	mov	r24, r18
     aec:	76 2f       	mov	r23, r22
     aee:	6a 2f       	mov	r22, r26
     af0:	11 24       	eor	r1, r1
     af2:	9f 57       	subi	r25, 0x7F	; 127
     af4:	50 40       	sbci	r21, 0x00	; 0
     af6:	8a f0       	brmi	.+34     	; 0xb1a <__mulsf3_pse+0x84>
     af8:	e1 f0       	breq	.+56     	; 0xb32 <__mulsf3_pse+0x9c>
     afa:	88 23       	and	r24, r24
     afc:	4a f0       	brmi	.+18     	; 0xb10 <__mulsf3_pse+0x7a>
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	bb 1f       	adc	r27, r27
     b04:	66 1f       	adc	r22, r22
     b06:	77 1f       	adc	r23, r23
     b08:	88 1f       	adc	r24, r24
     b0a:	91 50       	subi	r25, 0x01	; 1
     b0c:	50 40       	sbci	r21, 0x00	; 0
     b0e:	a9 f7       	brne	.-22     	; 0xafa <__mulsf3_pse+0x64>
     b10:	9e 3f       	cpi	r25, 0xFE	; 254
     b12:	51 05       	cpc	r21, r1
     b14:	70 f0       	brcs	.+28     	; 0xb32 <__mulsf3_pse+0x9c>
     b16:	5c cf       	rjmp	.-328    	; 0x9d0 <__fp_inf>
     b18:	a6 cf       	rjmp	.-180    	; 0xa66 <__fp_szero>
     b1a:	5f 3f       	cpi	r21, 0xFF	; 255
     b1c:	ec f3       	brlt	.-6      	; 0xb18 <__mulsf3_pse+0x82>
     b1e:	98 3e       	cpi	r25, 0xE8	; 232
     b20:	dc f3       	brlt	.-10     	; 0xb18 <__mulsf3_pse+0x82>
     b22:	86 95       	lsr	r24
     b24:	77 95       	ror	r23
     b26:	67 95       	ror	r22
     b28:	b7 95       	ror	r27
     b2a:	f7 95       	ror	r31
     b2c:	e7 95       	ror	r30
     b2e:	9f 5f       	subi	r25, 0xFF	; 255
     b30:	c1 f7       	brne	.-16     	; 0xb22 <__mulsf3_pse+0x8c>
     b32:	fe 2b       	or	r31, r30
     b34:	88 0f       	add	r24, r24
     b36:	91 1d       	adc	r25, r1
     b38:	96 95       	lsr	r25
     b3a:	87 95       	ror	r24
     b3c:	97 f9       	bld	r25, 7
     b3e:	08 95       	ret

00000b40 <printf>:
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	e5 ea       	ldi	r30, 0xA5	; 165
     b46:	f5 e0       	ldi	r31, 0x05	; 5
     b48:	b8 c2       	rjmp	.+1392   	; 0x10ba <__prologue_saves__+0x20>
     b4a:	fe 01       	movw	r30, r28
     b4c:	35 96       	adiw	r30, 0x05	; 5
     b4e:	61 91       	ld	r22, Z+
     b50:	71 91       	ld	r23, Z+
     b52:	af 01       	movw	r20, r30
     b54:	80 91 50 01 	lds	r24, 0x0150
     b58:	90 91 51 01 	lds	r25, 0x0151
     b5c:	31 d0       	rcall	.+98     	; 0xbc0 <vfprintf>
     b5e:	e2 e0       	ldi	r30, 0x02	; 2
     b60:	c8 c2       	rjmp	.+1424   	; 0x10f2 <__epilogue_restores__+0x20>

00000b62 <puts>:
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	8c 01       	movw	r16, r24
     b6c:	e0 91 50 01 	lds	r30, 0x0150
     b70:	f0 91 51 01 	lds	r31, 0x0151
     b74:	83 81       	ldd	r24, Z+3	; 0x03
     b76:	81 ff       	sbrs	r24, 1
     b78:	1b c0       	rjmp	.+54     	; 0xbb0 <puts+0x4e>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <puts+0x28>
     b80:	09 95       	icall
     b82:	89 2b       	or	r24, r25
     b84:	11 f0       	breq	.+4      	; 0xb8a <puts+0x28>
     b86:	cf ef       	ldi	r28, 0xFF	; 255
     b88:	df ef       	ldi	r29, 0xFF	; 255
     b8a:	f8 01       	movw	r30, r16
     b8c:	81 91       	ld	r24, Z+
     b8e:	8f 01       	movw	r16, r30
     b90:	60 91 50 01 	lds	r22, 0x0150
     b94:	70 91 51 01 	lds	r23, 0x0151
     b98:	db 01       	movw	r26, r22
     b9a:	18 96       	adiw	r26, 0x08	; 8
     b9c:	ed 91       	ld	r30, X+
     b9e:	fc 91       	ld	r31, X
     ba0:	19 97       	sbiw	r26, 0x09	; 9
     ba2:	81 11       	cpse	r24, r1
     ba4:	ed cf       	rjmp	.-38     	; 0xb80 <puts+0x1e>
     ba6:	8a e0       	ldi	r24, 0x0A	; 10
     ba8:	09 95       	icall
     baa:	89 2b       	or	r24, r25
     bac:	09 f4       	brne	.+2      	; 0xbb0 <puts+0x4e>
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <puts+0x52>
     bb0:	cf ef       	ldi	r28, 0xFF	; 255
     bb2:	df ef       	ldi	r29, 0xFF	; 255
     bb4:	ce 01       	movw	r24, r28
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <vfprintf>:
     bc0:	ac e0       	ldi	r26, 0x0C	; 12
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e5 ee       	ldi	r30, 0xE5	; 229
     bc6:	f5 e0       	ldi	r31, 0x05	; 5
     bc8:	68 c2       	rjmp	.+1232   	; 0x109a <__prologue_saves__>
     bca:	7c 01       	movw	r14, r24
     bcc:	6b 01       	movw	r12, r22
     bce:	8a 01       	movw	r16, r20
     bd0:	fc 01       	movw	r30, r24
     bd2:	17 82       	std	Z+7, r1	; 0x07
     bd4:	16 82       	std	Z+6, r1	; 0x06
     bd6:	83 81       	ldd	r24, Z+3	; 0x03
     bd8:	81 ff       	sbrs	r24, 1
     bda:	b9 c1       	rjmp	.+882    	; 0xf4e <vfprintf+0x38e>
     bdc:	88 24       	eor	r8, r8
     bde:	83 94       	inc	r8
     be0:	91 2c       	mov	r9, r1
     be2:	8c 0e       	add	r8, r28
     be4:	9d 1e       	adc	r9, r29
     be6:	f7 01       	movw	r30, r14
     be8:	93 81       	ldd	r25, Z+3	; 0x03
     bea:	f6 01       	movw	r30, r12
     bec:	93 fd       	sbrc	r25, 3
     bee:	85 91       	lpm	r24, Z+
     bf0:	93 ff       	sbrs	r25, 3
     bf2:	81 91       	ld	r24, Z+
     bf4:	6f 01       	movw	r12, r30
     bf6:	88 23       	and	r24, r24
     bf8:	09 f4       	brne	.+2      	; 0xbfc <vfprintf+0x3c>
     bfa:	a5 c1       	rjmp	.+842    	; 0xf46 <vfprintf+0x386>
     bfc:	85 32       	cpi	r24, 0x25	; 37
     bfe:	39 f4       	brne	.+14     	; 0xc0e <vfprintf+0x4e>
     c00:	93 fd       	sbrc	r25, 3
     c02:	85 91       	lpm	r24, Z+
     c04:	93 ff       	sbrs	r25, 3
     c06:	81 91       	ld	r24, Z+
     c08:	6f 01       	movw	r12, r30
     c0a:	85 32       	cpi	r24, 0x25	; 37
     c0c:	21 f4       	brne	.+8      	; 0xc16 <vfprintf+0x56>
     c0e:	b7 01       	movw	r22, r14
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	b9 d1       	rcall	.+882    	; 0xf86 <fputc>
     c14:	e8 cf       	rjmp	.-48     	; 0xbe6 <vfprintf+0x26>
     c16:	51 2c       	mov	r5, r1
     c18:	31 2c       	mov	r3, r1
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	20 32       	cpi	r18, 0x20	; 32
     c1e:	a8 f4       	brcc	.+42     	; 0xc4a <vfprintf+0x8a>
     c20:	8b 32       	cpi	r24, 0x2B	; 43
     c22:	61 f0       	breq	.+24     	; 0xc3c <vfprintf+0x7c>
     c24:	28 f4       	brcc	.+10     	; 0xc30 <vfprintf+0x70>
     c26:	80 32       	cpi	r24, 0x20	; 32
     c28:	51 f0       	breq	.+20     	; 0xc3e <vfprintf+0x7e>
     c2a:	83 32       	cpi	r24, 0x23	; 35
     c2c:	71 f4       	brne	.+28     	; 0xc4a <vfprintf+0x8a>
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <vfprintf+0x86>
     c30:	8d 32       	cpi	r24, 0x2D	; 45
     c32:	39 f0       	breq	.+14     	; 0xc42 <vfprintf+0x82>
     c34:	80 33       	cpi	r24, 0x30	; 48
     c36:	49 f4       	brne	.+18     	; 0xc4a <vfprintf+0x8a>
     c38:	21 60       	ori	r18, 0x01	; 1
     c3a:	28 c0       	rjmp	.+80     	; 0xc8c <vfprintf+0xcc>
     c3c:	22 60       	ori	r18, 0x02	; 2
     c3e:	24 60       	ori	r18, 0x04	; 4
     c40:	25 c0       	rjmp	.+74     	; 0xc8c <vfprintf+0xcc>
     c42:	28 60       	ori	r18, 0x08	; 8
     c44:	23 c0       	rjmp	.+70     	; 0xc8c <vfprintf+0xcc>
     c46:	20 61       	ori	r18, 0x10	; 16
     c48:	21 c0       	rjmp	.+66     	; 0xc8c <vfprintf+0xcc>
     c4a:	27 fd       	sbrc	r18, 7
     c4c:	27 c0       	rjmp	.+78     	; 0xc9c <vfprintf+0xdc>
     c4e:	38 2f       	mov	r19, r24
     c50:	30 53       	subi	r19, 0x30	; 48
     c52:	3a 30       	cpi	r19, 0x0A	; 10
     c54:	78 f4       	brcc	.+30     	; 0xc74 <vfprintf+0xb4>
     c56:	26 ff       	sbrs	r18, 6
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0xa6>
     c5a:	fa e0       	ldi	r31, 0x0A	; 10
     c5c:	5f 9e       	mul	r5, r31
     c5e:	30 0d       	add	r19, r0
     c60:	11 24       	eor	r1, r1
     c62:	53 2e       	mov	r5, r19
     c64:	13 c0       	rjmp	.+38     	; 0xc8c <vfprintf+0xcc>
     c66:	8a e0       	ldi	r24, 0x0A	; 10
     c68:	38 9e       	mul	r3, r24
     c6a:	30 0d       	add	r19, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	33 2e       	mov	r3, r19
     c70:	20 62       	ori	r18, 0x20	; 32
     c72:	0c c0       	rjmp	.+24     	; 0xc8c <vfprintf+0xcc>
     c74:	8e 32       	cpi	r24, 0x2E	; 46
     c76:	21 f4       	brne	.+8      	; 0xc80 <vfprintf+0xc0>
     c78:	26 fd       	sbrc	r18, 6
     c7a:	65 c1       	rjmp	.+714    	; 0xf46 <vfprintf+0x386>
     c7c:	20 64       	ori	r18, 0x40	; 64
     c7e:	06 c0       	rjmp	.+12     	; 0xc8c <vfprintf+0xcc>
     c80:	8c 36       	cpi	r24, 0x6C	; 108
     c82:	11 f4       	brne	.+4      	; 0xc88 <vfprintf+0xc8>
     c84:	20 68       	ori	r18, 0x80	; 128
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <vfprintf+0xcc>
     c88:	88 36       	cpi	r24, 0x68	; 104
     c8a:	41 f4       	brne	.+16     	; 0xc9c <vfprintf+0xdc>
     c8c:	f6 01       	movw	r30, r12
     c8e:	93 fd       	sbrc	r25, 3
     c90:	85 91       	lpm	r24, Z+
     c92:	93 ff       	sbrs	r25, 3
     c94:	81 91       	ld	r24, Z+
     c96:	6f 01       	movw	r12, r30
     c98:	81 11       	cpse	r24, r1
     c9a:	c0 cf       	rjmp	.-128    	; 0xc1c <vfprintf+0x5c>
     c9c:	98 2f       	mov	r25, r24
     c9e:	95 54       	subi	r25, 0x45	; 69
     ca0:	93 30       	cpi	r25, 0x03	; 3
     ca2:	18 f0       	brcs	.+6      	; 0xcaa <vfprintf+0xea>
     ca4:	90 52       	subi	r25, 0x20	; 32
     ca6:	93 30       	cpi	r25, 0x03	; 3
     ca8:	28 f4       	brcc	.+10     	; 0xcb4 <vfprintf+0xf4>
     caa:	0c 5f       	subi	r16, 0xFC	; 252
     cac:	1f 4f       	sbci	r17, 0xFF	; 255
     cae:	ff e3       	ldi	r31, 0x3F	; 63
     cb0:	f9 83       	std	Y+1, r31	; 0x01
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <vfprintf+0x10e>
     cb4:	83 36       	cpi	r24, 0x63	; 99
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <vfprintf+0x104>
     cb8:	83 37       	cpi	r24, 0x73	; 115
     cba:	71 f0       	breq	.+28     	; 0xcd8 <vfprintf+0x118>
     cbc:	83 35       	cpi	r24, 0x53	; 83
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <vfprintf+0x102>
     cc0:	5a c0       	rjmp	.+180    	; 0xd76 <vfprintf+0x1b6>
     cc2:	22 c0       	rjmp	.+68     	; 0xd08 <vfprintf+0x148>
     cc4:	f8 01       	movw	r30, r16
     cc6:	80 81       	ld	r24, Z
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	0e 5f       	subi	r16, 0xFE	; 254
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	44 24       	eor	r4, r4
     cd0:	43 94       	inc	r4
     cd2:	51 2c       	mov	r5, r1
     cd4:	54 01       	movw	r10, r8
     cd6:	14 c0       	rjmp	.+40     	; 0xd00 <vfprintf+0x140>
     cd8:	38 01       	movw	r6, r16
     cda:	f2 e0       	ldi	r31, 0x02	; 2
     cdc:	6f 0e       	add	r6, r31
     cde:	71 1c       	adc	r7, r1
     ce0:	f8 01       	movw	r30, r16
     ce2:	a0 80       	ld	r10, Z
     ce4:	b1 80       	ldd	r11, Z+1	; 0x01
     ce6:	26 ff       	sbrs	r18, 6
     ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <vfprintf+0x130>
     cea:	65 2d       	mov	r22, r5
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <vfprintf+0x134>
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	7f ef       	ldi	r23, 0xFF	; 255
     cf4:	c5 01       	movw	r24, r10
     cf6:	2c 87       	std	Y+12, r18	; 0x0c
     cf8:	3b d1       	rcall	.+630    	; 0xf70 <strnlen>
     cfa:	2c 01       	movw	r4, r24
     cfc:	83 01       	movw	r16, r6
     cfe:	2c 85       	ldd	r18, Y+12	; 0x0c
     d00:	6f e7       	ldi	r22, 0x7F	; 127
     d02:	26 2e       	mov	r2, r22
     d04:	22 22       	and	r2, r18
     d06:	17 c0       	rjmp	.+46     	; 0xd36 <vfprintf+0x176>
     d08:	38 01       	movw	r6, r16
     d0a:	f2 e0       	ldi	r31, 0x02	; 2
     d0c:	6f 0e       	add	r6, r31
     d0e:	71 1c       	adc	r7, r1
     d10:	f8 01       	movw	r30, r16
     d12:	a0 80       	ld	r10, Z
     d14:	b1 80       	ldd	r11, Z+1	; 0x01
     d16:	26 ff       	sbrs	r18, 6
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <vfprintf+0x160>
     d1a:	65 2d       	mov	r22, r5
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <vfprintf+0x164>
     d20:	6f ef       	ldi	r22, 0xFF	; 255
     d22:	7f ef       	ldi	r23, 0xFF	; 255
     d24:	c5 01       	movw	r24, r10
     d26:	2c 87       	std	Y+12, r18	; 0x0c
     d28:	18 d1       	rcall	.+560    	; 0xf5a <strnlen_P>
     d2a:	2c 01       	movw	r4, r24
     d2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d2e:	50 e8       	ldi	r21, 0x80	; 128
     d30:	25 2e       	mov	r2, r21
     d32:	22 2a       	or	r2, r18
     d34:	83 01       	movw	r16, r6
     d36:	23 fc       	sbrc	r2, 3
     d38:	1a c0       	rjmp	.+52     	; 0xd6e <vfprintf+0x1ae>
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <vfprintf+0x186>
     d3c:	b7 01       	movw	r22, r14
     d3e:	80 e2       	ldi	r24, 0x20	; 32
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	21 d1       	rcall	.+578    	; 0xf86 <fputc>
     d44:	3a 94       	dec	r3
     d46:	83 2d       	mov	r24, r3
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	48 16       	cp	r4, r24
     d4c:	59 06       	cpc	r5, r25
     d4e:	b0 f3       	brcs	.-20     	; 0xd3c <vfprintf+0x17c>
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <vfprintf+0x1ae>
     d52:	f5 01       	movw	r30, r10
     d54:	27 fc       	sbrc	r2, 7
     d56:	85 91       	lpm	r24, Z+
     d58:	27 fe       	sbrs	r2, 7
     d5a:	81 91       	ld	r24, Z+
     d5c:	5f 01       	movw	r10, r30
     d5e:	b7 01       	movw	r22, r14
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	11 d1       	rcall	.+546    	; 0xf86 <fputc>
     d64:	31 10       	cpse	r3, r1
     d66:	3a 94       	dec	r3
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	4f 1a       	sub	r4, r31
     d6c:	51 08       	sbc	r5, r1
     d6e:	41 14       	cp	r4, r1
     d70:	51 04       	cpc	r5, r1
     d72:	79 f7       	brne	.-34     	; 0xd52 <vfprintf+0x192>
     d74:	e5 c0       	rjmp	.+458    	; 0xf40 <vfprintf+0x380>
     d76:	84 36       	cpi	r24, 0x64	; 100
     d78:	11 f0       	breq	.+4      	; 0xd7e <vfprintf+0x1be>
     d7a:	89 36       	cpi	r24, 0x69	; 105
     d7c:	39 f5       	brne	.+78     	; 0xdcc <vfprintf+0x20c>
     d7e:	f8 01       	movw	r30, r16
     d80:	27 ff       	sbrs	r18, 7
     d82:	07 c0       	rjmp	.+14     	; 0xd92 <vfprintf+0x1d2>
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	0c 5f       	subi	r16, 0xFC	; 252
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	08 c0       	rjmp	.+16     	; 0xda2 <vfprintf+0x1e2>
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	88 27       	eor	r24, r24
     d98:	77 fd       	sbrc	r23, 7
     d9a:	80 95       	com	r24
     d9c:	98 2f       	mov	r25, r24
     d9e:	0e 5f       	subi	r16, 0xFE	; 254
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	4f e6       	ldi	r20, 0x6F	; 111
     da4:	b4 2e       	mov	r11, r20
     da6:	b2 22       	and	r11, r18
     da8:	97 ff       	sbrs	r25, 7
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <vfprintf+0x1fe>
     dac:	90 95       	com	r25
     dae:	80 95       	com	r24
     db0:	70 95       	com	r23
     db2:	61 95       	neg	r22
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	8f 4f       	sbci	r24, 0xFF	; 255
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	f0 e8       	ldi	r31, 0x80	; 128
     dbc:	bf 2a       	or	r11, r31
     dbe:	2a e0       	ldi	r18, 0x0A	; 10
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	a4 01       	movw	r20, r8
     dc4:	0c d1       	rcall	.+536    	; 0xfde <__ultoa_invert>
     dc6:	a8 2e       	mov	r10, r24
     dc8:	a8 18       	sub	r10, r8
     dca:	42 c0       	rjmp	.+132    	; 0xe50 <vfprintf+0x290>
     dcc:	85 37       	cpi	r24, 0x75	; 117
     dce:	31 f4       	brne	.+12     	; 0xddc <vfprintf+0x21c>
     dd0:	3f ee       	ldi	r19, 0xEF	; 239
     dd2:	b3 2e       	mov	r11, r19
     dd4:	b2 22       	and	r11, r18
     dd6:	2a e0       	ldi	r18, 0x0A	; 10
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	24 c0       	rjmp	.+72     	; 0xe24 <vfprintf+0x264>
     ddc:	99 ef       	ldi	r25, 0xF9	; 249
     dde:	b9 2e       	mov	r11, r25
     de0:	b2 22       	and	r11, r18
     de2:	8f 36       	cpi	r24, 0x6F	; 111
     de4:	b9 f0       	breq	.+46     	; 0xe14 <vfprintf+0x254>
     de6:	20 f4       	brcc	.+8      	; 0xdf0 <vfprintf+0x230>
     de8:	88 35       	cpi	r24, 0x58	; 88
     dea:	09 f0       	breq	.+2      	; 0xdee <vfprintf+0x22e>
     dec:	ac c0       	rjmp	.+344    	; 0xf46 <vfprintf+0x386>
     dee:	0d c0       	rjmp	.+26     	; 0xe0a <vfprintf+0x24a>
     df0:	80 37       	cpi	r24, 0x70	; 112
     df2:	21 f0       	breq	.+8      	; 0xdfc <vfprintf+0x23c>
     df4:	88 37       	cpi	r24, 0x78	; 120
     df6:	09 f0       	breq	.+2      	; 0xdfa <vfprintf+0x23a>
     df8:	a6 c0       	rjmp	.+332    	; 0xf46 <vfprintf+0x386>
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <vfprintf+0x240>
     dfc:	20 e1       	ldi	r18, 0x10	; 16
     dfe:	b2 2a       	or	r11, r18
     e00:	b4 fe       	sbrs	r11, 4
     e02:	0b c0       	rjmp	.+22     	; 0xe1a <vfprintf+0x25a>
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	b8 2a       	or	r11, r24
     e08:	08 c0       	rjmp	.+16     	; 0xe1a <vfprintf+0x25a>
     e0a:	24 ff       	sbrs	r18, 4
     e0c:	09 c0       	rjmp	.+18     	; 0xe20 <vfprintf+0x260>
     e0e:	e6 e0       	ldi	r30, 0x06	; 6
     e10:	be 2a       	or	r11, r30
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x260>
     e14:	28 e0       	ldi	r18, 0x08	; 8
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <vfprintf+0x264>
     e1a:	20 e1       	ldi	r18, 0x10	; 16
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <vfprintf+0x264>
     e20:	20 e1       	ldi	r18, 0x10	; 16
     e22:	32 e0       	ldi	r19, 0x02	; 2
     e24:	f8 01       	movw	r30, r16
     e26:	b7 fe       	sbrs	r11, 7
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <vfprintf+0x278>
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	0c 5f       	subi	r16, 0xFC	; 252
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x284>
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 5f       	subi	r16, 0xFE	; 254
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	a4 01       	movw	r20, r8
     e46:	cb d0       	rcall	.+406    	; 0xfde <__ultoa_invert>
     e48:	a8 2e       	mov	r10, r24
     e4a:	a8 18       	sub	r10, r8
     e4c:	ff e7       	ldi	r31, 0x7F	; 127
     e4e:	bf 22       	and	r11, r31
     e50:	b6 fe       	sbrs	r11, 6
     e52:	0b c0       	rjmp	.+22     	; 0xe6a <vfprintf+0x2aa>
     e54:	2b 2d       	mov	r18, r11
     e56:	2e 7f       	andi	r18, 0xFE	; 254
     e58:	a5 14       	cp	r10, r5
     e5a:	50 f4       	brcc	.+20     	; 0xe70 <vfprintf+0x2b0>
     e5c:	b4 fe       	sbrs	r11, 4
     e5e:	0a c0       	rjmp	.+20     	; 0xe74 <vfprintf+0x2b4>
     e60:	b2 fc       	sbrc	r11, 2
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <vfprintf+0x2b4>
     e64:	2b 2d       	mov	r18, r11
     e66:	2e 7e       	andi	r18, 0xEE	; 238
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <vfprintf+0x2b4>
     e6a:	7a 2c       	mov	r7, r10
     e6c:	2b 2d       	mov	r18, r11
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <vfprintf+0x2b6>
     e70:	7a 2c       	mov	r7, r10
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <vfprintf+0x2b6>
     e74:	75 2c       	mov	r7, r5
     e76:	24 ff       	sbrs	r18, 4
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <vfprintf+0x2d4>
     e7a:	fe 01       	movw	r30, r28
     e7c:	ea 0d       	add	r30, r10
     e7e:	f1 1d       	adc	r31, r1
     e80:	80 81       	ld	r24, Z
     e82:	80 33       	cpi	r24, 0x30	; 48
     e84:	11 f4       	brne	.+4      	; 0xe8a <vfprintf+0x2ca>
     e86:	29 7e       	andi	r18, 0xE9	; 233
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <vfprintf+0x2dc>
     e8a:	22 ff       	sbrs	r18, 2
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <vfprintf+0x2da>
     e8e:	73 94       	inc	r7
     e90:	73 94       	inc	r7
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <vfprintf+0x2dc>
     e94:	82 2f       	mov	r24, r18
     e96:	86 78       	andi	r24, 0x86	; 134
     e98:	09 f0       	breq	.+2      	; 0xe9c <vfprintf+0x2dc>
     e9a:	73 94       	inc	r7
     e9c:	23 fd       	sbrc	r18, 3
     e9e:	13 c0       	rjmp	.+38     	; 0xec6 <vfprintf+0x306>
     ea0:	20 ff       	sbrs	r18, 0
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <vfprintf+0x300>
     ea4:	5a 2c       	mov	r5, r10
     ea6:	73 14       	cp	r7, r3
     ea8:	58 f4       	brcc	.+22     	; 0xec0 <vfprintf+0x300>
     eaa:	53 0c       	add	r5, r3
     eac:	57 18       	sub	r5, r7
     eae:	73 2c       	mov	r7, r3
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <vfprintf+0x300>
     eb2:	b7 01       	movw	r22, r14
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	2c 87       	std	Y+12, r18	; 0x0c
     eba:	65 d0       	rcall	.+202    	; 0xf86 <fputc>
     ebc:	73 94       	inc	r7
     ebe:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec0:	73 14       	cp	r7, r3
     ec2:	b8 f3       	brcs	.-18     	; 0xeb2 <vfprintf+0x2f2>
     ec4:	04 c0       	rjmp	.+8      	; 0xece <vfprintf+0x30e>
     ec6:	73 14       	cp	r7, r3
     ec8:	10 f4       	brcc	.+4      	; 0xece <vfprintf+0x30e>
     eca:	37 18       	sub	r3, r7
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <vfprintf+0x310>
     ece:	31 2c       	mov	r3, r1
     ed0:	24 ff       	sbrs	r18, 4
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <vfprintf+0x336>
     ed4:	b7 01       	movw	r22, r14
     ed6:	80 e3       	ldi	r24, 0x30	; 48
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	2c 87       	std	Y+12, r18	; 0x0c
     edc:	54 d0       	rcall	.+168    	; 0xf86 <fputc>
     ede:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee0:	22 ff       	sbrs	r18, 2
     ee2:	1c c0       	rjmp	.+56     	; 0xf1c <vfprintf+0x35c>
     ee4:	21 ff       	sbrs	r18, 1
     ee6:	03 c0       	rjmp	.+6      	; 0xeee <vfprintf+0x32e>
     ee8:	88 e5       	ldi	r24, 0x58	; 88
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <vfprintf+0x332>
     eee:	88 e7       	ldi	r24, 0x78	; 120
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	b7 01       	movw	r22, r14
     ef4:	0c c0       	rjmp	.+24     	; 0xf0e <vfprintf+0x34e>
     ef6:	82 2f       	mov	r24, r18
     ef8:	86 78       	andi	r24, 0x86	; 134
     efa:	81 f0       	breq	.+32     	; 0xf1c <vfprintf+0x35c>
     efc:	21 fd       	sbrc	r18, 1
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <vfprintf+0x344>
     f00:	80 e2       	ldi	r24, 0x20	; 32
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <vfprintf+0x346>
     f04:	8b e2       	ldi	r24, 0x2B	; 43
     f06:	27 fd       	sbrc	r18, 7
     f08:	8d e2       	ldi	r24, 0x2D	; 45
     f0a:	b7 01       	movw	r22, r14
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	3b d0       	rcall	.+118    	; 0xf86 <fputc>
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <vfprintf+0x35c>
     f12:	b7 01       	movw	r22, r14
     f14:	80 e3       	ldi	r24, 0x30	; 48
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	36 d0       	rcall	.+108    	; 0xf86 <fputc>
     f1a:	5a 94       	dec	r5
     f1c:	a5 14       	cp	r10, r5
     f1e:	c8 f3       	brcs	.-14     	; 0xf12 <vfprintf+0x352>
     f20:	aa 94       	dec	r10
     f22:	f4 01       	movw	r30, r8
     f24:	ea 0d       	add	r30, r10
     f26:	f1 1d       	adc	r31, r1
     f28:	b7 01       	movw	r22, r14
     f2a:	80 81       	ld	r24, Z
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	2b d0       	rcall	.+86     	; 0xf86 <fputc>
     f30:	a1 10       	cpse	r10, r1
     f32:	f6 cf       	rjmp	.-20     	; 0xf20 <vfprintf+0x360>
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <vfprintf+0x380>
     f36:	b7 01       	movw	r22, r14
     f38:	80 e2       	ldi	r24, 0x20	; 32
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	24 d0       	rcall	.+72     	; 0xf86 <fputc>
     f3e:	3a 94       	dec	r3
     f40:	31 10       	cpse	r3, r1
     f42:	f9 cf       	rjmp	.-14     	; 0xf36 <vfprintf+0x376>
     f44:	50 ce       	rjmp	.-864    	; 0xbe6 <vfprintf+0x26>
     f46:	f7 01       	movw	r30, r14
     f48:	26 81       	ldd	r18, Z+6	; 0x06
     f4a:	37 81       	ldd	r19, Z+7	; 0x07
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x392>
     f4e:	2f ef       	ldi	r18, 0xFF	; 255
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	c9 01       	movw	r24, r18
     f54:	2c 96       	adiw	r28, 0x0c	; 12
     f56:	e2 e1       	ldi	r30, 0x12	; 18
     f58:	bc c0       	rjmp	.+376    	; 0x10d2 <__epilogue_restores__>

00000f5a <strnlen_P>:
     f5a:	fc 01       	movw	r30, r24
     f5c:	05 90       	lpm	r0, Z+
     f5e:	61 50       	subi	r22, 0x01	; 1
     f60:	70 40       	sbci	r23, 0x00	; 0
     f62:	01 10       	cpse	r0, r1
     f64:	d8 f7       	brcc	.-10     	; 0xf5c <strnlen_P+0x2>
     f66:	80 95       	com	r24
     f68:	90 95       	com	r25
     f6a:	8e 0f       	add	r24, r30
     f6c:	9f 1f       	adc	r25, r31
     f6e:	08 95       	ret

00000f70 <strnlen>:
     f70:	fc 01       	movw	r30, r24
     f72:	61 50       	subi	r22, 0x01	; 1
     f74:	70 40       	sbci	r23, 0x00	; 0
     f76:	01 90       	ld	r0, Z+
     f78:	01 10       	cpse	r0, r1
     f7a:	d8 f7       	brcc	.-10     	; 0xf72 <strnlen+0x2>
     f7c:	80 95       	com	r24
     f7e:	90 95       	com	r25
     f80:	8e 0f       	add	r24, r30
     f82:	9f 1f       	adc	r25, r31
     f84:	08 95       	ret

00000f86 <fputc>:
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	8c 01       	movw	r16, r24
     f90:	eb 01       	movw	r28, r22
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	81 fd       	sbrc	r24, 1
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <fputc+0x18>
     f98:	0f ef       	ldi	r16, 0xFF	; 255
     f9a:	1f ef       	ldi	r17, 0xFF	; 255
     f9c:	1a c0       	rjmp	.+52     	; 0xfd2 <fputc+0x4c>
     f9e:	82 ff       	sbrs	r24, 2
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <fputc+0x36>
     fa2:	2e 81       	ldd	r18, Y+6	; 0x06
     fa4:	3f 81       	ldd	r19, Y+7	; 0x07
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	28 17       	cp	r18, r24
     fac:	39 07       	cpc	r19, r25
     fae:	64 f4       	brge	.+24     	; 0xfc8 <fputc+0x42>
     fb0:	e8 81       	ld	r30, Y
     fb2:	f9 81       	ldd	r31, Y+1	; 0x01
     fb4:	01 93       	st	Z+, r16
     fb6:	f9 83       	std	Y+1, r31	; 0x01
     fb8:	e8 83       	st	Y, r30
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <fputc+0x42>
     fbc:	e8 85       	ldd	r30, Y+8	; 0x08
     fbe:	f9 85       	ldd	r31, Y+9	; 0x09
     fc0:	80 2f       	mov	r24, r16
     fc2:	09 95       	icall
     fc4:	89 2b       	or	r24, r25
     fc6:	41 f7       	brne	.-48     	; 0xf98 <fputc+0x12>
     fc8:	8e 81       	ldd	r24, Y+6	; 0x06
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	9f 83       	std	Y+7, r25	; 0x07
     fd0:	8e 83       	std	Y+6, r24	; 0x06
     fd2:	c8 01       	movw	r24, r16
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	08 95       	ret

00000fde <__ultoa_invert>:
     fde:	fa 01       	movw	r30, r20
     fe0:	aa 27       	eor	r26, r26
     fe2:	28 30       	cpi	r18, 0x08	; 8
     fe4:	51 f1       	breq	.+84     	; 0x103a <__ultoa_invert+0x5c>
     fe6:	20 31       	cpi	r18, 0x10	; 16
     fe8:	81 f1       	breq	.+96     	; 0x104a <__ultoa_invert+0x6c>
     fea:	e8 94       	clt
     fec:	6f 93       	push	r22
     fee:	6e 7f       	andi	r22, 0xFE	; 254
     ff0:	6e 5f       	subi	r22, 0xFE	; 254
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	8f 4f       	sbci	r24, 0xFF	; 255
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	af 4f       	sbci	r26, 0xFF	; 255
     ffa:	b1 e0       	ldi	r27, 0x01	; 1
     ffc:	3e d0       	rcall	.+124    	; 0x107a <__ultoa_invert+0x9c>
     ffe:	b4 e0       	ldi	r27, 0x04	; 4
    1000:	3c d0       	rcall	.+120    	; 0x107a <__ultoa_invert+0x9c>
    1002:	67 0f       	add	r22, r23
    1004:	78 1f       	adc	r23, r24
    1006:	89 1f       	adc	r24, r25
    1008:	9a 1f       	adc	r25, r26
    100a:	a1 1d       	adc	r26, r1
    100c:	68 0f       	add	r22, r24
    100e:	79 1f       	adc	r23, r25
    1010:	8a 1f       	adc	r24, r26
    1012:	91 1d       	adc	r25, r1
    1014:	a1 1d       	adc	r26, r1
    1016:	6a 0f       	add	r22, r26
    1018:	71 1d       	adc	r23, r1
    101a:	81 1d       	adc	r24, r1
    101c:	91 1d       	adc	r25, r1
    101e:	a1 1d       	adc	r26, r1
    1020:	20 d0       	rcall	.+64     	; 0x1062 <__ultoa_invert+0x84>
    1022:	09 f4       	brne	.+2      	; 0x1026 <__ultoa_invert+0x48>
    1024:	68 94       	set
    1026:	3f 91       	pop	r19
    1028:	2a e0       	ldi	r18, 0x0A	; 10
    102a:	26 9f       	mul	r18, r22
    102c:	11 24       	eor	r1, r1
    102e:	30 19       	sub	r19, r0
    1030:	30 5d       	subi	r19, 0xD0	; 208
    1032:	31 93       	st	Z+, r19
    1034:	de f6       	brtc	.-74     	; 0xfec <__ultoa_invert+0xe>
    1036:	cf 01       	movw	r24, r30
    1038:	08 95       	ret
    103a:	46 2f       	mov	r20, r22
    103c:	47 70       	andi	r20, 0x07	; 7
    103e:	40 5d       	subi	r20, 0xD0	; 208
    1040:	41 93       	st	Z+, r20
    1042:	b3 e0       	ldi	r27, 0x03	; 3
    1044:	0f d0       	rcall	.+30     	; 0x1064 <__ultoa_invert+0x86>
    1046:	c9 f7       	brne	.-14     	; 0x103a <__ultoa_invert+0x5c>
    1048:	f6 cf       	rjmp	.-20     	; 0x1036 <__ultoa_invert+0x58>
    104a:	46 2f       	mov	r20, r22
    104c:	4f 70       	andi	r20, 0x0F	; 15
    104e:	40 5d       	subi	r20, 0xD0	; 208
    1050:	4a 33       	cpi	r20, 0x3A	; 58
    1052:	18 f0       	brcs	.+6      	; 0x105a <__ultoa_invert+0x7c>
    1054:	49 5d       	subi	r20, 0xD9	; 217
    1056:	31 fd       	sbrc	r19, 1
    1058:	40 52       	subi	r20, 0x20	; 32
    105a:	41 93       	st	Z+, r20
    105c:	02 d0       	rcall	.+4      	; 0x1062 <__ultoa_invert+0x84>
    105e:	a9 f7       	brne	.-22     	; 0x104a <__ultoa_invert+0x6c>
    1060:	ea cf       	rjmp	.-44     	; 0x1036 <__ultoa_invert+0x58>
    1062:	b4 e0       	ldi	r27, 0x04	; 4
    1064:	a6 95       	lsr	r26
    1066:	97 95       	ror	r25
    1068:	87 95       	ror	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	ba 95       	dec	r27
    1070:	c9 f7       	brne	.-14     	; 0x1064 <__ultoa_invert+0x86>
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	61 05       	cpc	r22, r1
    1076:	71 05       	cpc	r23, r1
    1078:	08 95       	ret
    107a:	9b 01       	movw	r18, r22
    107c:	ac 01       	movw	r20, r24
    107e:	0a 2e       	mov	r0, r26
    1080:	06 94       	lsr	r0
    1082:	57 95       	ror	r21
    1084:	47 95       	ror	r20
    1086:	37 95       	ror	r19
    1088:	27 95       	ror	r18
    108a:	ba 95       	dec	r27
    108c:	c9 f7       	brne	.-14     	; 0x1080 <__ultoa_invert+0xa2>
    108e:	62 0f       	add	r22, r18
    1090:	73 1f       	adc	r23, r19
    1092:	84 1f       	adc	r24, r20
    1094:	95 1f       	adc	r25, r21
    1096:	a0 1d       	adc	r26, r0
    1098:	08 95       	ret

0000109a <__prologue_saves__>:
    109a:	2f 92       	push	r2
    109c:	3f 92       	push	r3
    109e:	4f 92       	push	r4
    10a0:	5f 92       	push	r5
    10a2:	6f 92       	push	r6
    10a4:	7f 92       	push	r7
    10a6:	8f 92       	push	r8
    10a8:	9f 92       	push	r9
    10aa:	af 92       	push	r10
    10ac:	bf 92       	push	r11
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	ca 1b       	sub	r28, r26
    10c4:	db 0b       	sbc	r29, r27
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	09 94       	ijmp

000010d2 <__epilogue_restores__>:
    10d2:	2a 88       	ldd	r2, Y+18	; 0x12
    10d4:	39 88       	ldd	r3, Y+17	; 0x11
    10d6:	48 88       	ldd	r4, Y+16	; 0x10
    10d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10da:	6e 84       	ldd	r6, Y+14	; 0x0e
    10dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    10de:	8c 84       	ldd	r8, Y+12	; 0x0c
    10e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    10e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    10e4:	b9 84       	ldd	r11, Y+9	; 0x09
    10e6:	c8 84       	ldd	r12, Y+8	; 0x08
    10e8:	df 80       	ldd	r13, Y+7	; 0x07
    10ea:	ee 80       	ldd	r14, Y+6	; 0x06
    10ec:	fd 80       	ldd	r15, Y+5	; 0x05
    10ee:	0c 81       	ldd	r16, Y+4	; 0x04
    10f0:	1b 81       	ldd	r17, Y+3	; 0x03
    10f2:	aa 81       	ldd	r26, Y+2	; 0x02
    10f4:	b9 81       	ldd	r27, Y+1	; 0x01
    10f6:	ce 0f       	add	r28, r30
    10f8:	d1 1d       	adc	r29, r1
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	ed 01       	movw	r28, r26
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
